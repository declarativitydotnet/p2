#!/usr/bin/env python2
# -*- Mode: python -*-
#
# Usage1: dart -c [OPTIONS] dart.xml [cmd1] [cmd2] ...
# Usage2: dart [OPTIONS] dart1.xml dart2.xml dart3.xml ... dartn.xml
#
# DESCRIPTION: Run a DART distributed test (or set of tests).
#
# $Id$
#
import getopt
import os
import sys
import time

sys.path.append(os.environ['DART_DIR'] + "/lib/python2.2") # NOTE: changeme!

from dart import Dart

DART_CMDS = [ "esetup", "eteardown", "dsetup", "drun", "dreset" ]

def print_usage():
    print "Usage1: dart -c [OPTIONS] dart.xml [cmd1] [cmd2] ..."
    print
    print "   Commands"
    print
    print "   esetup      Emulab setup"
    print "   eteardown   Emulab teardown"
    print "   dsetup      DART setup"
    print "   drun        DART run"
    print "   dreset      DART reset"
    print
    print "Default with the -c option is \"esetup dsetup drun dreset\"  Another"
    print "useful sequence after an experiment is set up is \"dreset drun\"."
    print "which resets the experiment and runs a DART test again."
    print
    print "Usage2: dart [OPTIONS] dart1.xml dart2.xml dart3.xml ... dartn.xml"
    print 
    print "Without the -c option, DART schedules the tests specified by the"
    print "list of XML files dart1.xml, dart2.xml, ... , dartn.xml such that"
    print "Emulab topologies are reused as much as possible." 
    print

def parse_cmdline(argv):
    shortopts = "vtcE"
    longopts = [ "verbose", "timings", "control", "preprocessed" ]
    flags = {}
    flags["verbose"] = None
    flags["timings"] = None
    flags["control"] = None
    flags["preprocessed"] = None
    opts, args = getopt.getopt(argv[1:], shortopts, longopts)
    for o, v in opts:
        if o in ("-v", "--verbose"):
            flags["verbose"] = 1
        elif o in ("-t", "--timings"):
            flags["timings"] = 1
        elif o in ("-c", "--control"): 
            flags["control"] = 1
        elif o in ("-E", "--preprocessed"): 
            flags["preprocessed"] = 1
    return flags, args

def check_cmds(cmds):
    for cmd in cmds:
        if cmd not in DART_CMDS:
            raise "Invalid command %s" % cmd

def make_cmdmap(dart):
    cmdmap = { "esetup" : dart.emulab_setup,
               "eteardown" : dart.emulab_teardown,
               "dsetup" : dart.dart_setup,
               "drun" : dart.dart_run,
               "dreset" : dart.dart_reset }
    return cmdmap

def run_cmds(cmds, cmdmap, flags):
    for cmd in cmds:
        if not flags["timings"]: 
            cmdmap[cmd]()
        else:
            t1 = time.time()
            cmdmap[cmd]()
            t2 = time.time()
            t = t2 - t1
            print "Phase %s: %f seconds" % (cmd, t)

def run_single_test(args, flags):
    if len(args) == 1:
        cmds = [ "esetup", "dsetup", "drun", "dreset" ]
    else:
        cmds = args[1:]
    check_cmds(cmds)
    dartfile = args[0]
    dart = Dart(dartfile, flags)
    cmdmap = make_cmdmap(dart)
    run_cmds(cmds, cmdmap, flags)
    
def run_multiple_tests(args, flags):
    cmdmaps = []
    nsfilemap = {}
    for dartfile in args:
        dart = Dart((dartfile), flags)
        cmdmaps.append(make_cmdmap(dart))
        if dart.df.nsfile not in nsfilemap:
            nsfilemap[dart.df.nsfile] = []
        nsfilemap[dart.df.nsfile].append(dart)
    nsfiles = []
    for nsfile in nsfilemap:
        tests = nsfilemap[nsfile]
        ntests = len(tests)
        for i in range(ntests):
            dart = tests[i]
            cmdmap = make_cmdmap(dart)
            if i == 0 and ntests == 1:
                cmds = [ "esetup", "dsetup", "drun", "eteardown" ]
            elif i == 0 and ntests > 1:
                cmds = [ "esetup", "dsetup", "drun" ]
            elif i == (ntests - 1):
                cmds = [ "dreset", "dsetup", "drun", "eteardown" ]
            else:
                cmds = [ "dreset", "dsetup", "drun" ]
            print "Running test %s with topology %s" % (dart.df.name, nsfile)
            run_cmds(cmds, cmdmap, flags)
    
if __name__ == "__main__":
    try:
        flags, args = parse_cmdline(sys.argv)
    except:
        print_usage()
        sys.exit(3)
    if len(args) < 1:
        print_usage()        
        sys.exit(3)
    #
    # Run single test with explicit control or run multiple
    # tests under DART's control for test ordering.>
    # 
    if flags["control"]:
        run_single_test(args, flags)
    else:
        run_multiple_tests(args, flags)
