#!/usr/bin/env python2
# -*- Mode: python -*-
#
# Usage1: setup_node -n <num_nodes> -i <IP> -p <start_port> chord_exec
#
# DESCRIPTION: Setup and run n chord nodes.
#
#
import getopt
import os
import sys
import time
import random

def print_usage():
    print
    print "Usage: setup_node -i <IP> -p <start_port> [-l <landmark_ip:port> [-n <num_nodes>]] [-s seed] chord_exec output_dir"
    print "DESC:  Start some number of chord nodes on an emulab host."
    print "DESC:  If arg seed is not given then a random seed in [0, 2^32-1] is supplied ."
    print "DESC:  If a landmark node is not supplied then it is assumed to be the master."
    print "DESC:  If a landmark node exists then a number of slaves can be supplied and assigned ports [0-(num_nodes-1)]."
    print

def parse_cmdline(argv): 
    global log
    shortopts = "n:i:p:l:"
    flags = {"num_nodes" : 1, "seed" : None, "IP" : None, "start_port" : None, "landmark" : None}
    opts, args = getopt.getopt(argv[1:], shortopts)
    for o, v in opts:
        if   o == "-n": flags["num_nodes"]  = v
        elif o == "-s": flags["seed"]       = v
        elif o == "-i": flags["IP"]         = v
        elif o == "-p": flags["start_port"] = v
        elif o == "-l": flags["landmark"]   = v
    if args[1]: log = open(args[1]+"/setup_node.log", 'a')
    return flags, args

# e.g., runChord <loggingLevel> <seed> <myipaddr:port> [<landmark_ipaddr:port>]\n";
def run_node(chord_exec, seed, ip, p, lm, out):
    print >> log, "RUN: %s, seed = %d, node = %s:%s, landmark = %s, output = %s" % (chord_exec, seed, ip, p, lm, out)

    if lm: rv = os.system("%s WARN %d %s:%s %s >& %s" % (chord_exec, seed, ip, p, lm, out))
    else:  rv = os.system("%s WARN %d %s:%s >& %s" % (chord_exec, seed, ip, p, out))

    if rv: 
        print >> log, "Error executing node setup" 
        sys.exit(1)
    else: sys.exit(0)
    
if __name__ == "__main__":
    try:
        flags, args = parse_cmdline(sys.argv)
    except:
        print_usage()
        sys.exit(3)
    if len(args) < 1:
        print_usage()        
        sys.exit(3)

    children = []
    #
    # Run n chord nodes at increasing port numbers. 
    for test in range(int(flags["num_nodes"])):
        if flags["seed"] == None: seed = random.random() * sys.maxint
        pid = os.fork()
        if pid == 0:
            run_node(args[0], seed, flags["IP"], int(flags["start_port"])+test, flags["landmark"], 
                     args[1]+"/chord_"+flags["IP"]+"_"+str(int(flags["start_port"])+test)+".out")
        else: children += [pid]
    log.flush()

    print >> log, children
    while children: 
        pid, status = os.wait()
        children.remove(pid)
        print >> log, children
