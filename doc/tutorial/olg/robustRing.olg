/*
 * (@#)$Id$
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300,
 * Berkeley, CA, 94704.  Attention:  Intel License Inquiry.
 * Or
 * UC Berkeley EECS Computer Science Division, 387 Soda Hall #1776, 
 * Berkeley, CA,  94707. Attention: P2 Group.
 * 
 * DESCRIPTION: A very simplistic ring-based DHT in Overlog, derived
 * from the simple stabilization rules in the Chord ToN paper. This
 * version contains a successor list for robustness.
 * 
 *
 */

#define STABILIZATIONPERIOD 5
#define MISSEDPINGS 3
#define PINGPERIOD 1
#define SUCCLISTSIZE 2

materialize(identifier, infinity, 1, keys(1)).

materialize(predecessor, infinity, 1, keys(1)).

materialize(successor, infinity, 1, keys(1)).

materialize(pendingJoin, infinity, infinity, keys(1)).

materialize(succList, infinity, SUCCLISTSIZE, keys(1,2)).

materialize(pendingPing, infinity, infinity, keys(1,2,3)).


identifier(ME, MYID).



/** Create a new ring */

create1 predecessor(@Me, "NIL") :-
	create(@Me).

create2 successor(@Me, Me) :-
	create(@Me).


/** Join an existing ring */

join1 pendingJoin(@Me) :-
	join(@Me, CurrentNode).

join2 predecessor(@Me, "NIL") :-
	join(@Me, CurrentNode).

join3 lookup(@CurrentNode, MyID, Me) :-
	join(@Me, CurrentNode),
	identifier(@Me, MyID).

join4 successor(@Me, Successor) :-
	found(@Me, MyID, Successor),
	pendingJoin(@Me).

join5 delete pendingJoin(@Me) :-
	found(@Me, MyID, Successor),
	pendingJoin(@Me).


/** Stabilize the ring */

stabilize1 stabilize(@Me) :-
	periodic(@Me, EventID, STABILIZATIONPERIOD).

stabilize2 successor(@Me, Predecessor) :-
	stabilize(@Me),
	successor(@Me, Successor),
	identifier(@Successor, SuccessorID),
	predecessor(@Successor, Predecessor),
	identifier(@Predecessor, PredecessorID),
	identifier(@Me, MyID),
	PredecessorID in (MyID, SuccessorID).

stabilize3 notify(@Successor, Me) :-
	stabilize(@Me),
	successor(@Me, Successor).

stabilize4 predecessor(@Me, SomeGuy) :-
	notify(@Me, SomeGuy),
	predecessor(@Me, Predecessor),
	Predecessor == "NIL".

stabilize5 predecessor(@Me, SomeGuy) :-
	notify(@Me, SomeGuy),
	identifier(@Me, MyID),
	identifier(@SomeGuy, SomeGuyID),
	predecessor(@Me, Predecessor),
	identifier(@Predecessor, PredecessorID),
	Predecessor != "NIL",
	SomeGuyID in (PredecessorID, MyID).

stabilize6 succList(@Me, NewSeqNo, ListNode) :-
	stabilize(@Me),
	successor(@Me, Successor),
	succList(@Successor, SeqNo, ListNode),
	SeqNo < SUCCLISTSIZE,
	NewSeqNo := SeqNo + 1.

stabilize7 succList(@Me, 1, Successor) :-
	stabilize(@Me),
	successor(@Me, Successor).




/** Connectivity Management */

conn1 pingCheck(@Me, T) :-
	periodic(@Me, E, PINGPERIOD), T := f_now().

conn2 pingNode(@Me, Successor, T) :-
	pingCheck(@Me, T), successor(@Me, Successor),
	Successor != Me.

conn3 pingNode(@Me, Predecessor, T) :-
	pingCheck(@Me, T), predecessor(@Me, Predecessor),
	Predecessor != Me, Predecessor != "NIL".

conn4 pendingPing(@Me, Node, T) :-
	pingNode(@Me, Node, T).

conn5 ping(@Node, Me) :-
	pingNode(@Me, Node, T).

conn6 pong(@Pinger, Me) :-
	ping(@Me, Pinger).

conn7 delete pendingPing(@Me, Pingee, T) :-
	pong(@Me, Pingee), pendingPing(@Me, Pingee, T).

conn8 pingeeCheck(@Me, Pingee, T) :-
	pingCheck(@Me, T), pendingPing(@Me, Pingee, _).

conn9 maxDelay(@Me, Pingee, a_MAX<Delay>) :-
	pingeeCheck(@Me, Pingee, T),
	pendingPing(@Me, Pingee, OldT),
	Delay := T - OldT.

conn10 deadNode(@Me, Pingee) :-
	maxDelay(@Me, Pingee, Delay),
	Delay > MISSEDPINGS * PINGPERIOD.

conn11 delete pendingPing(@Me, Pingee, T) :-
	deadNode(@Me, Pingee),
	pendingPing(@Me, Pingee, T).

conn12 earliestSuccessor(@Me, a_MIN<SeqNo>) :-
	deadNode(@Me, Pingee), successor(@Me, Pingee),
	succList(@Me, SeqNo, OtherSuccessor),
	OtherSuccessor != Pingee.

conn13 successor(@Me, Successor) :-
	earliestSuccessor(@Me, SeqNo),
	succList(@Me, SeqNo, Successor).

conn14 predecessor(@Me, "NIL") :-
	deadNode(@Me, Pingee), predecessor(@Me, Pingee).




/** Lookup a key on the ring */

lookup1 found(@Requester, Key, Successor) :-
	lookup(@Node, Key, Requester),
	successor(@Node, Successor),
	identifier(@Successor, SuccessorID),
	identifier(@Node, NodeID),
	Key in (NodeID, SuccessorID].

lookup2 lookup(@Successor, Key, Requester) :-
	lookup(@Node, Key, Requester),
	successor(@Node, Successor),
	identifier(@Successor, SuccessorID),
	identifier(@Node, NodeID),
	!(Key in (NodeID, SuccessorID]).
	



watchmod(successor, "az").
watchmod(predecessor, "a").
watchmod(create, "c").
watchmod(join, "c").
watchmod(deadNode, "s").
watchmod(succList, "a").
watchmod(pendingPing, "az").
watch(maxDelay).


/** End of program */
