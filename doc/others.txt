2.0 DHT Aggregation/Multicast Tree

Send a join request based on a DHT key. Along the way, lookup requests are used to set up the forwarding state in the reverse direction along the way. The lookup tuple needs to tag along the previous hop and also the groupID. If performing aggregation, do a lookup request to a root node, and aggregate along the way.

Event tuples:
lookup(currentNodeIP, key, requestNodeIP, previousHop, groupID, eventID) , TTL=0
joinGroup(currentNodeIP, rootNodeID, groupID, eventID)

Derived tuples:
forwardState(currentNodeIP, nextHopIP, rootNodeID, groupID)

M1: lookup(NI,K,R,null,G,E) :- joinGroup(NI,K,G,E)
M2: forwardState(I,J,K,G) :- lookup(I,K,R,J,G,E)
M3: joinGroup(ni,k,g,e)

Need to change the base case of the lookup to set up the forwarding state at the root node itself:
L1: forwardState(SI,NI,K,G) :- node(NI,N), lookup(NI,K,R,P,G,E),  bestSuccessor(NI,S,SI), N<K<=S



3.0 Pastry
Routing table = Finger
Successors = Leaf Set
Change lookup rules.
F_dist now depends on prefix.

Is the above enough?


4.0 Gossip Network

Base tuples: 
link(X,Y)
message(X, mid, msg)

Derived tuples:
reachable(X,Y) 

Event tuples:
startPush(X,mid)
startPull(X,mid)

Query to find all nodes:
R1: reachable(X,Y) :- link(X,Y)
R2: reachable(X,Y) :- link(X,Z), reachable(Z,Y)

Random push:
PS1: message(Y,mid,msg) :- startPush(X,mid), reachable(X,Y), message(X,mid,msg), f_coinflip()
PS2: startPush(n, mid), period=t, start=s, end=e

Random pull:
PL1: pullRequest(Y, X, mid) :- (message(X,mid,msg), startPull(X,mid), reachable(X,Y), f_coinflip()
PL2: message(Y,mid,msg) :- pullRequest(X,Y,mid),  message(X,mid,msg)
PL3: startPull(n, mid), period=t, start=s, end=e

R1 and R2 will be issued from one node for all nodes to figure out all other nodes.. After time lag, each node starts random push for X seconds. Then switch to random pull mid-way.

Do the same for pull, but start after a time lag. Each pull event will invoke a pull request and a message is returned if present.



5.0 Multicast Overlay
SIGCOMM example for single-source multicast. First, compute the best paths, then set up the state of the multicast tree.

