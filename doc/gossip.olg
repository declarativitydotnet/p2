/**
 * This program instructs nodes to gossip the overlog programs it
 * knows about with other planetlab nodes. The program assumes 
 * a sliceNodeEvent, triggered by a sliceEvent, that provides the set 
 * of nodes in a planetlab slice. Such event support is provided by the
 * planetlab.py scripts located in the 'python/scripts' directory.
 * The p2terminal.py script will send an overlog program as an
 * overlogEvent, which will tigger an insertion into the overlog
 * table followed by an overlogInstall event. The overlogInstall event
 * is picked up by the overlog compile and install strand created by
 * the P2 C++ stub interface.
 */

#define MASTER "planet1.berkeley.intel-research.net:10000"
#define NUM_GOSSIP 2

materialize(overlog, infinity, infinity, keys(3)).
materialize(sliceNodes, infinity, infinity, keys(2,3)).
materialize(nodeCount, infinity, 1, keys(2)).

watch(status).

i0  nodeCount@J(J, C) :- periodic@J(J, E, 0, 1), C:=0.

r0a sliceEvent@J(J, E)    :- periodic@J(J, E, 1, 1).
r0b sliceNodes@J(J, N, C) :- sliceNodeEvent@J(J, N), nodeCount@J(J, C).
r0c nodeCount@J(J, C2)    :- sliceNodeEvent@J(J, N), nodeCount@J(J, C), C2:=C+1.

g0 overlogEvent@N(N, S, T, P) :- gossipEvent@J(J, I, S, T, P, C), 
                                 sliceNodes@J(J, N, X), I==X,
                                 C < NUM_GOSSIP.

g1 gossipEvent@J(J, I2, S, T, P, C2) :- gossipEvent@J(J, I, S, T, P, C), 
                                        nodeCount@J(J, A), 
                                        C < NUM_GOSSIP, 
                                        C2:=C+1, I2 := f_rand() % A.

/** Overlog installation rules */
p0 overlog@J(J, S, T, P)        :- overlogEvent@J(J, S, T, P).
p1 overlogInstall@J(J, S, T, P) :- overlog@J(J, S, T, P).
p2 displayEvent@M(M, I, J, T)   :- overlogInstall@J(J, S, T, P), M:=MASTER, I:="I".

/** Tell some folks about the new install */
p3 gossipEvent@J(J, I, S, T, P, C) :- overlogInstall@J(J, S, T, P),
                                      nodeCount@J(J, A), 
                                      C:=0, I:=f_rand() % A.

/** Periodically tell folks what i have installed */
p3a gossipEvent@J(J, I, S, T, P, C) :- gossipOverlog@J(J, I), 
                                       overlog@J(J, S, T, P), C:=0.

p3b gossipOverlog@J(J, I) :- periodic@J(J, E, 240),
                             nodeCount@J(J, A), 
                             I := f_rand() % A.
