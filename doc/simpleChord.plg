/* The base tuples */
materialize(node, 2, infinity, 1).
materialize(finger, 4, infinity, 160).
materialize(successor, 3, infinity, 100).
materialize(predecessor, 3, infinity, 1).
materialize(bestSuccessor, 3, infinity, 1).
materialize(maxSuccessorDist, 2, infinity, 1).
materialize(nextFingerFix, 2, infinity, 1).
materialize(fingerLookup, 3, infinity, 160).
materialize(stabilize, 2, infinity, 1).
materialize(landmarkNode, 2, infinity, 1).
materialize(joinRecord, 2, infinity, 1).
materialize(successorNodeDistance, 3, infinity, 100).
materialize(successorCount, 2, infinity, 1).
materialize(fingerCount, 2, infinity, 1).

/* Start count from 1 */
primarykeys(node, 1).
primarykeys(finger, 2).
primarykeys(successor, 2).
primarykeys(successorCount, 1).
primarykeys(fingerCount, 1).
primarykeys(successorNodeDistance, 2).
primarykeys(predecessor, 1).
primarykeys(bestSuccessor, 1).
primarykeys(maxSuccessorDist, 1).
primarykeys(nextFingerFix, 1).
primarykeys(fingerLookup, 2).
primarykeys(stabilizeRecord, 1).
primarykeys(landmarkNode, 1).
primarykeys(joinRecord, 1).
primarykeys(newSuccessorEvent, 2).

watch(lookupResults).
watch(lookup).
watch(bestLookupDistance).
watch(testFinger).


/* lookup rules */


rule L1 lookupResults@R(R,K,S,SI,E) :-
	node@NI(NI,N),
	lookup@NI(NI,K,R,E),
	bestSuccessor@NI(NI,S,SI),
	select_rangeID3(K,N,S). 


rule L2 bestLookupDistance@NI(NI,K,R,E,min<D>) :-   
	node@NI(NI,N),
	lookup@NI(NI,K,R,E),
	finger@NI(NI,I,B,BI),	
	assign_distID(D,B,K), 	
	select_rangeID1(B,N,K).

rule L3 lookup@BI(min<BI>,K,R,E) :- 
        node@NI(NI,N),
	bestLookupDistance@NI(NI,K,R,E,D), 
	finger@NI(NI,I,B,BI),
	select_rangeID1(B,N,K),
	assign_distID(D1,B,K),	
	select_eqID(D,D1).


/* Neighbor Selection */

watch(newSuccessorEvent).
watch(minSuccessorDist).
watch(successorNodeDistance).
watch(computeSuccessorNodeDistance).
watch(successorCount).
watch(evictSuccessorAt).
watch(maxSuccessorDist).
watch(evictSuccessor).
watch(successor).


rule SU1 computeSuccessorNodeDistance@NI(NI,S,D) :-
	 newSuccessorEvent@NI(NI,S,SI),
         node@NI(NI,N),
	 assign_distID(D,N,S).

rule SU2 successorNodeDistance@NI(NI,S,D) :-
         computeSuccessorNodeDistance@NI(NI,S,D1),
	 assign_minusOneID(D,D1).

rule SU3 newSuccessorEvent@NI(NI,S,SI) :- 
	 successor@NI(NI,S,SI).

rule SU4 minSuccessorDist@NI(NI,min<D>) :-
	 successorNodeDistance@NI(NI,S,D).

rule SU5 bestSuccessor@NI(NI,S,SI) :-
	 minSuccessorDist@NI(NI,D),
	 successorNodeDistance@NI(NI,S,D),
	 successor@NI(NI,S,SI).

rule SR1 successorCount@NI(NI,count<S>) :-
	 successor@NI(NI,S,SI).

rule SR2 evictSuccessor@NI(NI) :-
	successorCount@NI(NI,C), 
	select_gtI(C,4).

rule SR3 maxSuccessorDist@NI(NI,max<D>) :-
        successorNodeDistance(NI,S,D).

rule SR4 evictSuccessorAt@NI(NI,S,D) :-
	evictSuccessor@NI(NI),
	maxSuccessorDist@NI(NI,D),
	successorNodeDistance@NI(NI,S,D).

rule SR5 delete successorNodeDistance@NI(NI,S,D) :-
	evictSuccessorAt@NI(NI,S,D),
	successorNodeDistance@NI(NI,S,D).

rule SR6 delete successor@NI(NI,S,SI) :-
	evictSuccessorAt@NI(NI,S,D),
	successor@NI(NI,S,SI).

/* Churn handling */

/*watch(join).
watch(joinEvent).
watch(joinRecord).
watch(startJoin).


rule J1 join@NI(NI,E) :-
	joinEvent@NI(NI), 
	assign_random(E).

rule J2 joinRecord@NI(NI,E) :-
	join@NI(NI,E).

rule J3 startJoin@LI(LI,N,NI,E) :-
	join@NI(NI,E),
	node@NI(NI,N),
	landmarkNode@NI(NI,LI),
	!select_eqS(LI,0).

rule J4 successor@NI(NI,N,NI1) :-
	join@NI(NI,E),
	landmarkNode@NI(NI,LI),
	node@NI(NI,N),
	assign_varAssign(NI1,NI),
	select_eqS(LI,0).

rule J5 lookup@LI(LI,N,NI,E) :-
	startJoin@LI(LI,N,NI,E).

rule J6 successor@NI(NI,S,SI) :-
	joinRecord@NI(NI,E),
	lookupResults@NI(NI,K,S,SI,E).
*/




