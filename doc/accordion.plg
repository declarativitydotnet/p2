/* Accordion $Id$

Prototype implementation of the Accordion overlay in OverLog.

Contains parallel lookups and acknowledgments with exploration.

Still to do: expiration of neighbors, inclusion of stabilization and
	such.

Try out with

tests/runOverLog doc/accordion.plg NONE 0 127.0.0.1:10000 0 "neighbor=127.0.0.1:10001;"
*/


/** Constants

t_inc: budget refresh period

b_avail: remaining available bandwidth budget

b_burst: maximum bandwidth burst

r_avg: desired traffic rate

w_max: maximum size of parallelism window

*/





/** Ring maintenance */




/** Bandwidth budget refresh */

b1 budgetInc@NodeAddr(NodeAddr, BAvailNew) :-
   periodic@NodeAddr(NodeAddr, Nonce, t_inc), budget@NodeAddr(NodeAddr,
   BAvail), BAvailNew := BAvail + r_avg * t_inc.

b2 budget@NodeAddr(NodeAddr, BAvail) :- budgetInc@NodeAddr(NodeAddr,
   BAvail).



/** Parallelism window */

p1 updatePWin@NodeAddr(NodeAddr, Win, Exp, Lookups) :-
   periodic@NodeAddr(NodeAddr, Nonce, b_burst/r_avg),
   pWindow@NodeAddr(NodeAddr, Win), explorations@NodeAddr(NodeAddr,
   Exp), lookups@NodeAddr(NodeAddr, Lookups).

p2 pWindow@NodeAddr(NodeAddr, WinNew) :- updatePWin@NodeAddr(NodeAddr,
   Win, Nonce, Lookups), Explores > Lookups, Win := min(Win + 1, w_max).

p3 pWindow@NodeAddr(NodeAddr, WinNew) :- updatePWin@NodeAddr(NodeAddr,
   Win, Nonce, Lookups), Explores <= Lookups, Win := max(Win / 2, 1).



/** Lookups */

l1 responseM@NodeAddr(NodeAddr, Requester, Key, SuccID, SuccAddr, Nonce)
   :- lookup@NodeAddr(NodeAddr, PrevHop, Key, Requester, Nonce,
   Primary), node@NodeAddr(NodeAddr, NodeID),
   bestSuccessor@NodeAddr(NodeAddr, SuccID, SuccAddr), Key in (NodeID,
   SuccID].

l2 bestNeighborDistance@NodeAddr(NodeAddr, Key, Requester, Nonce,
   Primary, min<Dist, NbrAddr>) :- lookup@NodeAddr(NodeAddr, PrevHop,
   Key, Requester, Nonce, Primary), node@NodeAddr(NodeAddr, NodeID),
   neighbor@NodeAddr(NodeAddr, NbrID, NbrAddr), Dist := Key - NbrID - 1,
   NbrID in (NodeID, Key), budget@NodeAddr(NodeAddr, BAvail), Primary ||
   (BAvail > 0).

l3 forward@NodeAddr(NodeAddr, NbrAddr, Key, Requester, Nonce, Primary)
   :- bestNeighborDistance@NodeAddr(NodeAddr, Key, Requester, Nonce,
   Primary, Dist, NbrAddr).



/** Lookup acknowledgment */

a1 ackExplore@NodeAddr(NodeAddr, PrevHop, Key, Requester, Nonce,
  min(m)<Dist, NbrAddr, NbrID>) :- lookup@NodeAddr(NodeAddr, PrevHop,
  Key, Requester, Nonce, Primary), neighbor@NodeAddr(NodeAddr, NbrAddr,
  NbrID), node@NodeAddr(NodeAddr, N), NbrID in (N, Key], Dist := Key -
  NbrID - 1.

a2 ack@PrevHop(PrevHop, NodeAddr, Key, Requester, Nonce, NbrAddr,
   NbrID) :- ackExplore@NodeAddr(NodeAddr, PrevHop, Key, Requester, Nonce,
   Dist, NbrAddr, NbrID).

a3 neighbor@NodeAddr(NodeAddr, NbrID, NbrAddr) :- ack@NodeAddr(NodeAddr, NH, Key,
   Requester, Nonce, NbrAddr, NbrID).






/** Parallelism. If I have room in my parallelism window, duplicate an
outgoing lookup. */

pp1 lookupM@NodeAddr(NodeAddr, NbrAddr, Key, Requester, Nonce, Primary)
   :- forward@NodeAddr(NodeAddr, NbrAddr, Key, Requester, Nonce,
   Primary).

pp2 pNextHop@NodeAddr(NodeAddr, Key, Requester, Nonce,
   min(Remaining)<Dist, NbrAddr>) :- forward@NodeAddr(NodeAddr, NH, Key,
   Requester, Nonce, Primary), pWindow@NodeAddr(NodeAddr, Win), Win > 1,
   Remaining := Win - 1, neighbor@NodeAddr(NodeAddr, NbrID, NbrAddr),
   NbrAddr != NH, Dist := Key - NbrID - 1, budget@NodeAddr(NodeAddr,
   BAvail), BAvail > -b_burst.

pp3 lookupM@NodeAddr(NodeAddr, NbrAddr, Key, Requester, Nonce, false) :-
   pNextHop@NodeAddr(NodeAddr, Key, Requester, Nonce, Dist, NbrAddr).







/** Bandwidth consumption */

bc0 budget@NodeAddr(NodeAddr, BAvailNew) :- message@NodeAddr(NodeAddr,
   Cost), budget@NodeAddr(NodeAddr, BAvail), BAvailNew := max(BAvail -
   Cost, -b_burst).


bc1 message@NodeAddr(NodeAddr, Cost) :- responseM@NodeAddr(NodeAddr,
   Requester, Key, NbrID, NbrAddr, Nonce), Cost := resp_size.

bc1a response@Requester(Requester, Key, NbrID, NbrAddr, Nonce) :-
   responseM@NodeAddr(NodeAddr, Requester, Key, NbrID, NbrAddr, Nonce).


bc2 message@NodeAddr(NodeAddr, Cost) :- lookupM@NodeAddr(NodeAddr,
   NbrAddr, Key, Requester, Nonce, P), Cost := lookup_size.

bc2a lookup@NbrAddr(NbrAddr, NodeAddr, Key, Requester, Nonce, Primary) :-
   lookupM@NodeAddr(NodeAddr, NbrAddr, Key, Requester, Nonce, Primary).


bc3 message@NodeAddr(NodeAddr, Cost) :- exploreM@NodeAddr(NodeAddr,
   NbrAddr, NNbrID, Nonce), Cost := explore_size.

bc3a explore@NbrAddr(NbrAddr, NNbrID, NodeAddr, Nonce) :-
   exploreM@NodeAddr(NodeAddr, NbrAddr, NNbrID, Nonce).





/** Counting lookups */

cl1 explores@NodeAddr(NodeAddr, NewExplores) :-
   explores@NodeAddr(NodeAddr, Explores), exploreM@NodeAddr(NodeAddr,
   NbrAddr, NNbrID, Nonce), NewExplores := Explores + 1.

cl2 lookups@NodeAddr(NodeAddr, NewLookups) :- lookups@NodeAddr(NodeAddr,
   Lookups), lookupM@NodeAddr(NodeAddr, NbrAddr, Key, Requester, Nonce,
   Primary), NewLookups := Lookups + 1.






/** Continuously compute maximum gap for current neighbor
distribution. */

n1 interNeighborDist@NodeAddr(NodeAddr, NbrID, NbrAddr, min<Dist,
   NNbrID>) :- neighbor@NodeAddr(NodeAddr, NbrID, NbrAddr),
   neighbor@NodeAddr(NodeAddr, NNbrID, NNbrAddr), Dist := NNbrID - NbrID
   - 1.

n2 maxGap@NodeAddr(NodeAddr, max<Gap, NbrAddr, NNbrID>) :-
   interNeighborDist@NodeAddr(NodeAddr, NbrID, NbrAddr, Dist, NNbrID),
   node@NodeAddr(NodeAddr, NodeID), Gap := Dist / (NbrID - NodeID - 1).



/** Exploration */

e1 exploreEvent@NodeAddr(NodeAddr) :- budgetInc@NodeAddr(NodeAddr,
   NbrID), NbrID > 0.

e2 exploreM@NodeAddr(NodeAddr, NbrAddr, NNbrID, Nonce) :-
   maxGap@NodeAddr(NodeAddr, Gap, NbrAddr, NNbrID), Nonce := f_rand().



/** Exploration response */

ea1 exploreGetNodes@NodeAddr(NodeAddr, PrevHop, Key, Nonce, min(m)<Dist,
  NbrAddr, NbrID>) :- explore@NodeAddr(NodeAddr, Key, PrevHop, Nonce),
  neighbor@NodeAddr(NodeAddr, NbrAddr, NbrID), node@NodeAddr(NodeAddr,
  N), NbrID in (N, Key], Dist := Key - NbrID - 1.

ea2 eResp@PrevHop(PrevHop, NodeAddr, Key, Nonce, NbrAddr,
   NbrID) :- exploreGetNodes@NodeAddr(NodeAddr, PrevHop, Key, Nonce,
   Dist, NbrAddr, NbrID).

ea3 neighbor@NodeAddr(NodeAddr, NbrID, NbrAddr) :-
   eResp@NodeAddr(NodeAddr, NH, Key, Nonce, NbrAddr,
   NbrID).













/** END */
