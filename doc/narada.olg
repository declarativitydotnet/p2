/*
 * (@#)$Id$
 *
 * Copyright (c) 2005 Intel Corporation
 *
 * This file is distributed under the terms in the attached INTEL-LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300,
 * Berkeley, CA, 94704.  Attention:  Intel License Inquiry.
 * 
 * DESCRIPTION: Narada mesh in Overlog
 *
 */

/*
Try out with

tests/runOverLog doc/narada.olg NONE 0 127.0.0.1:10000 0 "neighbor=127.0.0.1:10001;"
*/



/** Real Narada (from the ESM paper)

    Member holds: address, last sequence number seen, local time when
    last sequence number was seen
    member(@X, Address, Sequence, Time, Live)



    A refresh message to neighbors contains a bunch of entries.
    refresh(@X, NewSequence, Address, ASequence).

    Each entry contains member address, last sequence.
    entry(@X, Address, Sequence).

    My current sequence, starting with 0.



    To join, I start sending refreshes to my chosen neighbors.
*/


materialize(member, infinity, infinity, keys(2)).
materialize(sequence, infinity, 1, keys(2)).
materialize(env, infinity, infinity, keys(2,3)).
materialize(neighbor, infinity, infinity, keys(2)).

watch(member).
watch(sequence).
watch(refreshSequence).
watch(refresh).
watch(membersFound).

watch(report).


e0 neighbor(@X,Y) :- periodic(@X,E,0,1), env(@X, H, Y),
  H=="neighbor".



/** Start with sequence 0 */
s0 sequence(@X, Sequence) :- periodic(@X, E, 0, 1), Sequence := 0.




/** Periodically start a refresh */

r1 refreshEvent(@X) :- periodic(@X, E, 3).



/** Increment my own sequence number */

r2 refreshSequence(@X, NewSequence) :- refreshEvent(@X), sequence(@X,
  Sequence), NewSequence := Sequence + 1.


/** Save my incremented sequence */

r3 sequence(@X, NewSequence) :- refreshSequence(@X, NewSequence).



/** Send a refresh to all neighbors with my current membership */

r4 refresh(@Y, X, NewSequence, Address, ASequence, ALive) :-
  refreshSequence(@X, NewSequence), member(@X, Address, ASequence,
  Time, ALive), neighbor(@X, Y).





/** How many member entries that match the member in a refresh message
(but not myself) do I have? */

r5 membersFound(@X, Address, ASequence, ALive, count<*>) :-
  refresh(@X, Y, YSequence, Address, ASequence, ALive), member(@X,
  Address, MySequence, MyTime, MyLive), X != Address.



/** If I have none, just store the information I just received */

r6 member(@X, Address, ASequence, T, ALive) :- membersFound(@X,
  Address, ASequence, ALive, C), C == 0, T := f_now().


/** If I have some, just update with the information I received if it
has a higher sequence number. */

r7 member(@X, Address, ASequence, T, ALive) :- membersFound(@X,
  Address, ASequence, ALive, C), C > 0, T := f_now(), member(@X, Address,
  MySequence, MyT, MyLive), MySequence < ASequence.


/** Update my neighbor's member entry */

r8 member(@X, Y, YSequence, T, YLive) :- refresh(@X, Y, YSequence, A,
  AS, AL), T := f_now(), YLive := 1.





/** Member updates if we have negation

If I receive a refresh and have no entry for the contents, store the
member (first bullet in Figure 2 of the ESM paper). Don't update
myself.

r5 member(@X, Address, Sequence, T, Live) :- refresh(@X, Y, Address,
  Sequence, Live), T := f_now(), not member(@X, Address, MySequence,
  MyTime, MyLive), X != Address.



If I receive a refresh and already have an entry for the contents, but
my entry is older, replace it with contents (bullet 2.2 in Figure 2 of
the ESM paper). Don't update myself.

r6 member(@X, Address, Sequence, T, Live) :- refresh(@X, Y, Address,
  Sequence, Live), T := f_now(), member(@X, Address, MySequence,
  MyTime, Live), MySequence < Sequence, X != Address.

*/










/** Add anyone from whom I receive a refresh message to my neighbors */

n1 neighbor(@X, Y) :- refresh(@X, Y, YS, A, AS, L).






/** Probing of neighbor liveness */

l1 neighborProbe(@X) :- periodic(@X, E, 1).

l2 deadNeighbor(@X, Y) :- neighborProbe(@X), T := f_now(),
  neighbor(@X, Y), member(@X, Y, YS, YT, L), T - YT > 20.

l3 delete neighbor(@X, Y) :- deadNeighbor(@X, Y).

l4 member(@X, Neighbor, DeadSequence, T, Live) :- deadNeighbor(@X,
  Neighbor), member(@X, Neighbor, S, T1, L), Live := 0, DeadSequence :=
  S + 1, T:= f_now().






/** Reporting current members */

m1 reportEvent(@X) :- periodic(@X, E, 10).

m2 report(@X, Y, S, D) :- reportEvent(@X), member(@X, Y, S, T, D).







/* End of Narada */
