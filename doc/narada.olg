/*
 * (@#)$Id$
 *
 * Copyright (c) 2005 Intel Corporation
 *
 * This file is distributed under the terms in the attached INTEL-LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300,
 * Berkeley, CA, 94704.  Attention:  Intel License Inquiry.
 * 
 * DESCRIPTION: Narada mesh in Overlog
 *

Try out with two nodes pointing to each other:

bin/runStagedOverlog -o doc/narada.olg -DNEIGHBOR=\"localhost:10001\" 

and 

bin/runStagedOverlog -o doc/narada.olg -p 10001 -DNEIGHBOR=\"localhost:10000\" 

*/



/** Real Narada (from the ESM paper)

    Member holds: address, last sequence number seen, local time when
    last sequence number was seen
    member(@X, Address, Sequence, Time, Live)



    A refresh message to neighbors contains a bunch of entries.
    refresh(@X, Sender, SenderSequence, MemberAddress, MemberSequence, MemberLive).

    Each entry contains member address, last sequence.
    entry(@X, Address, Sequence).

    My current sequence, starting with 0.



    To join, I start sending refreshes to my chosen neighbors.
*/


materialize(member, infinity, infinity, keys(2)).
materialize(sequence, infinity, 1, keys(2)).
materialize(neighbor, infinity, infinity, keys(2)).


watchmod(report, "s").
watchmod(reportEvent, "s").
watchmod(refresh, "cs").


/** My default neighbor */
e0 neighbor(@X,NEIGHBOR) :- periodic(@X,E,0,1).



/** Start with sequence 0 */
s0 sequence(@X, 0) :- periodic(@X, E, 0, 1).








/** Periodically start a refresh */
r1 refreshEvent(@X) :- periodic(@X, E, 3, 0).





/** Increment my own sequence number */
r2 refreshSequence(@X, Sequence + 1) :-
	refreshEvent(@X), sequence(@X, Sequence).


/** Save my incremented sequence */
r3 sequence(@X, NewSequence) :-
	refreshSequence(@X, NewSequence).



/** Send a refresh to all neighbors with my current members */
r4 refresh(@Y, X, NewSequence, Address, ASequence, ALive) :-
	refreshSequence(@X, NewSequence),
	member(@X, Address, ASequence, Time, ALive),
	neighbor(@X, Y).


/** Send an extra refresh message for myself. Since the original Narada
sends a single message containing a membership set, it can also send an
empty membership set. Here we send one refresh message per member. So if
I have no members, I send no refresh. That's why we add the following,
to cover empty-membership situations. I always send a 0-sequence refresh
for myself. */
r4a refresh(@Y, X, NewSequence, X, NewSequence, 1) :-
	refreshSequence(@X, NewSequence),
	neighbor(@X, Y).






/**
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
Refresh handler if I don't have negation. Must use aggregation. Replace
r5 and r6 with the following.

How many member entries that match the member in a refresh message (but
not myself) do I have?

r5noneg membersFound(@X, Address, ASequence, ALive, a_count<*>) :-
	refresh(@X, Y, YSequence, Address, ASequence, ALive),
	member(@X, Address, MySequence, MyTime, MyLive), X != Address.





If I have none, just store the information I just received

r6noneg member(@X, Address, ASequence, f_now(), ALive) :-
	membersFound(@X, Address, ASequence, ALive, 0).




If I have some, just update with the information I received if it
has a higher sequence number.

r7noneg member(@X, Address, ASequence, f_now(), ALive) :-
	membersFound(@X, Address, ASequence, ALive, C), C > 0,
	member(@X, Address, MySequence, MyT, MyLive),
	MySequence < ASequence.
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
*/




/** If I receive a refresh and have no entry for the contents, store the
member (first bullet in Figure 2 of the ESM paper). Don't update
myself. */

r5 member(@X, Address, ASequence, f_now(), ALive) :-
	refresh(@X, Y, YSequence, Address, ASequence, ALive),
	notin member(@X, Address, MyASequence, MyTime, MyLive),
	X != Address.

/** If I receive a refresh and already have an entry for the contents,
but my entry is older, replace it with contents (bullet 2.2 in Figure 2 
of the ESM paper). Don't update myself. */

r6 member(@X, Address, ASequence, f_now(), ALive) :-
	refresh(@X, Y, YSequence, Address, ASequence, ALive),
	member(@X, Address, MyASequence, MyTime, MyLive),
	MyASequence < ASequence, X != Address.

















/** Add anyone from whom I receive a refresh message to my neighbors */

n1 neighbor(@X, Y) :- refresh(@X, Y, YS, A, AS, L).

/** Probing of neighbor liveness */

l1 neighborProbe(@X) :- periodic(@X, E, 1, 0).

l2 deadNeighbor(@X, Y) :- neighborProbe(@X), T := f_now(),
  neighbor(@X, Y), member(@X, Y, YS, YT, L), T - YT > 20.

l3 delete neighbor(@X, Y) :- deadNeighbor(@X, Y).

l4 member(@X, Neighbor, DeadSequence, T, Live) :- deadNeighbor(@X,
  Neighbor), member(@X, Neighbor, S, T1, L), Live := 0, DeadSequence :=
  S + 1, T:= f_now().






/** Reporting current members */

m1 reportEvent(@X) :- periodic(@X, E, 10, 0).

m2 report(@X, Y, S, D) :- reportEvent(@X), member(@X, Y, S, T, D).







/* End of Narada */
