/**
 * Construct a random topology out of planetlab 
 * nodes taken from sliceNodeEvent, which indicate. 
 * the set of nodes in a slice.
 */

materialize(overlog, infinity, infinity, keys(3)).
materialize(sliceNodes, infinity, infinity, keys(2)).
materialize(neighbors, infinity, infinity, keys(2)).
materialize(neighborCount, infinity, 1, keys(2)).

watch(overlogInstall).

r0a sliceEvent@J(J, E) :- periodic@J(J, E, 0, 1).
r0b sliceNodes@J(J, N) :- sliceNodeEvent@J(J, N).

r1 neighborCount@J(J, C) :- periodic@J(J, E, 0, 1), C:=0.

r2 neighborCount@J(J, count<N>) :- neighbors@J(J, N).

r3 neighborRequest@N(N, J) :- periodic@J(J, E, 5),
                              neighborCount@J(J, C), 
                              sliceNodes@J(J, N),
                              f_coinFlip(0.1) == 1,
                              C < NUM_NEIGHBORS.

r4 neighborResponse@N(N, J) :- neighborRequest@J(J, N).

r5 neighbors@J(J, N) :- neighborResponse@J(J, N),
                        neighborCount@J(J, C),
                        C < NUM_NEIGHBORS.

r6 neighborPing@N(N, J) :- periodic@J(J, E, 30),
                           neighbors@J(J, N).
r7 neighborPong@N(N, J) :- neighborPing@J(J, N).
r8 neighbors@J(J, N)    :- neighborPong@J(J, N).

r9 delete neighbors@J(J,N) :- periodic@J(J,E,10),
                              neighbors@J(J,N),
                              neighborCount@J(J,C),
                              C > NUM_NEIGHBORS. 

/** Overlog installation rules */
p0 overlog@J(J, T, P)           :- overlogEvent@J(J, S, T, P).
p1 overlogInstall@J(J, J, T, P) :- overlog@J(J, T, P).
p3 displayEvent@M(M, I, J, T)   :- overlogInstall@J(J, S, T, P), M:=MASTER, I:="I".

/** Tell all my neighbors about the new install */
p2 overlogEvent@N(N, J, T, P)   :- overlogInstall@J(J, S, T, P), neighbors@J(J, N).

/** Tell the dude connecting about all the past overlog programs */
p3 overlogEvent@N(N, J, T, P)   :- overlog@J(J, T, P), neighborRequest@J(J, N).
