/*
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300,
 * Berkeley, CA, 94704.  Attention:  Intel License Inquiry.
 * Or
 * UC Berkeley EECS Computer Science Division, 387 Soda Hall #1776, 
 * Berkeley, CA,  94707. Attention: P2 Group.
 * 
 * DESCRIPTION: P2Chord in OverLog
 *
 * Execute first node with
 * tests/runOverLog -o doc/chord.olg -D LANDMARK=\"NIL\" -D LOCALADDRESS=\"<myhost>:<myport>\" -n <myhost> -p <myport> -D NODEID=<mynodeid>
 *
 * Execute joining nodes with
 * tests/runOverLog -o doc/chord.olg -D LANDMARK=\"<landmarkhost>:<landmarkport>\" -D LOCALADDRESS=\"<myhost>:<myport>\" -n <myhost> -p <myport> -D NODEID=<mynodeid>
 *
 * For example, the following starts node localhost:10000 with node ID 0 to join via landmark localhost:10101
 * tests/runOverLog -o doc/chord.olg -D LANDMARK=\"localhost:10101\" -D LOCALADDRESS=\"localhost:10000\" -n localhost -p 10000 -DNODEID=0x0I
 */

/* The base tuples */

materialize(node, infinity, 1, keys(1)).
materialize(landmark, infinity, 1, keys(1)).
materialize(finger, 180, 160, keys(2)).
materialize(bestSucc, 180, 1, keys(1)).
materialize(succ, 10, 100, keys(2)).
materialize(pred, 10, 1, keys(1)).
materialize(join, 10, 5, keys(1)).
materialize(pingNode, 10, infinity, keys(2)).  
materialize(fFix, 180, 160, keys(2)).  
materialize(nextFingerFix, 180, 1, keys(1)).  



/** Preexisting state. My landmark and myself. */
landmark(LOCALADDRESS, LANDMARK).
node(LOCALADDRESS, NODEID).


/** Lookups */

watch(lookupResults).
watch(lookup).
watch(bestLookupDist).
watch(landmark).

l1 lookupResults(@R,K,S,SI,E) :- node(@NI,N),
				  lookup(@NI,K,R,E), 
				  bestSucc(@NI,S,SI),
				  K in (N,S].


l2 bestLookupDist(@NI,K,R,E,min<D>) :- node(@NI,N), 
					 lookup(@NI,K,R,E), 
					 finger(@NI,I,B,BI), 
					 D:=K - B - 1, 
					 B in (N,K).

l3 lookup(min<@BI>,K,R,E) :- node(@NI,N),	    
			       bestLookupDist(@NI,K,R,E,D), 
			       finger(@NI,I,B,BI), 
			       D == K - B - 1,
			       B in (N,K).

/** Neighbor Selection */

watch(newSuccEvent).
watch(bestSucc).
watch(bestSuccDist).

n0 newSuccEvent(@NI) :- succ(@NI,S,SI).

n1 bestSuccDist(@NI,min<D>) :- newSuccEvent(@NI),
			  node(@NI,N),
			  succ(@NI,S,SI), 
			  D:=S - N - 1.

n3 bestSucc(@NI,S,SI) :- succ(@NI,S,SI),
			   bestSuccDist(@NI,D), 
			   node(@NI,N),
			   D == S - N - 1.

n4 finger(@NI,0,S,SI) :- bestSucc(@NI,S,SI).


/** Successor eviction */

watch(succCount).
watch(evictSucc).
watch(maxSuccDist).

s1 succCount(@NI,count<*>) :- newSuccEvent(@NI),
				succ(@NI,S,SI).

s2 evictSucc(@NI) :- succCount(@NI,C), 
		    C > 2.

s3 maxSuccDist(@NI,max<D>) :- succ(@NI,S,SI),
				node(@NI,N), 
				evictSucc(@NI),
				D:=S - N - 1.

s4 delete succ(@NI,S,SI) :- node(@NI,N), 
			      succ(@NI,S,SI),
			      maxSuccDist(@NI,D), 
			      D == S - N - 1.


/** Finger fixing */

watch(fFixEvent).
watch(fFix).
watch(eagerFinger).
watch(nextFingerFix).
watch(finger).

f1 fFix(@NI,E,I) :- periodic(@NI,E,10), 
		   nextFingerFix(@NI,I).

f2 fFixEvent(@NI,E,I) :- fFix(@NI,E,I).

f3 lookup(@NI,K,NI,E) :- fFixEvent(@NI,E,I),
			   node(@NI,N),			
			   K:=0x1I << I + N.

f4 eagerFinger(@NI,I,B,BI) :- fFix(@NI,E,I), 
				lookupResults(@NI,K,B,BI,E).

f5 finger(@NI,I,B,BI) :- eagerFinger(@NI,I,B,BI).

f6 eagerFinger(@NI,I,B,BI) :- node(@NI,N), 
				eagerFinger(@NI,I1,B,BI), 
				I:=I1 + 1, 
				K:=0x1I << I + N,
				K in (N,B), 
				BI != NI.
 
f7 delete fFix(@NI,E,I1) :- eagerFinger(@NI,I,B,BI), 
			   fFix(@NI,E,I1),
			   I > 0,   
			   I1 == I - 1.


f8 nextFingerFix(@NI,0) :- eagerFinger(@NI,I,B,BI), 
			   ((I == 159) || (BI == NI)).

f9 nextFingerFix(@NI,I) :- node(@NI,N), 
			   eagerFinger(@NI,I1,B,BI), 
			   I:=I1 + 1, 
			   K:=0x1I << I + N,
			   K in (B,N), 
			   NI != BI.


/** Churn Handling */

watch(joinEvent).
watch(join).
watch(joinReq). 

/* Insert in entries after a delay. Change join. */

c1 joinEvent(@NI,E) :- periodic(@NI,E,1,2).

c2 join(@NI,E) :- joinEvent(@NI,E).

c3 joinReq(@LI,N,NI,E) :- joinEvent(@NI, E),
	node(@NI, N), 
	landmark(@NI, LI),
	LI != "NIL".

c4 succ(@NI,N,NI) :- landmark(@NI, LI),
	joinEvent(@NI, E),
	node(@NI, N), 
	LI == "NIL".

c5 lookup(@LI,N,NI,E) :- joinReq(@LI,N,NI,E).

c6 succ(@NI,S,SI) :- join(@NI,E),
	lookupResults(@NI,K,S,SI,E).



/** Stabilization */

watch(stabilize).
watch(succ).
watch(pred).
watch(periodicnodebestSuccSI).
watch(periodicsuccSI).
watch(periodicnodesuccSI).

sb1 succ(@NI,P,PI) :- periodic(@NI,E,15),
		        node(@NI,N),    
			bestSucc(@NI,S,SI),
			pred(@SI,P,PI), 
			PI != "NIL", 
			P in (N,S).

sb2 succ(@NI,S1,SI1) :- periodic(@NI,E,15),
			succ(@NI,S,SI),
			succ(@SI,S1,SI1). 

sb3 pred(@SI,N,NI) :- periodic(@NI,E,15),
			node(@NI,N), 			
			succ(@NI,S,SI),
			pred(@SI,P,PI),
			node(@SI,N1),
			((PI == "NIL") || (N in (P,N1))).   


/** Connectivity Monitoring */
watch(pingEvent).
watch(pingReq).
watch(pingResp).
watch(pingNode).
watch(pendingPing).
watch(checkPendingEvent).
watch(timeoutEvent).

cm0 pingEvent(@NI,E) :- periodic(@NI,E,5).

cm1 pendingPing(@NI,PI,E) :- pingEvent(@NI,E),
			pingNode(@NI,PI).

cm2 pingResp(@RI,NI,E) :- pingReq(@NI,RI,E).

cm3 pingNode(@NI,SI) :- succ(@NI,S,SI), 
		       SI != NI.

cm4 pingNode(@NI,PI) :- pred(@NI,P,PI), 
		       PI != NI, 
		       PI != "NIL".

cm5 succ(@NI,S,SI) :- succ(@NI,S,SI),
		     pingResp(@NI,SI,E).

cm6 pred(@NI,P,PI) :- pred(@NI,P,PI),
		     pingResp(@NI,PI,E).


/* Check periodic */
/*watch(predCount).*/

cp0 predCount(@NI,count<*>) :- periodic(@NI,E,2), 
    pred(@NI,P,PI).

cp1 pred(@NI,"NIL","NIL") :- predCount(@NI,N),
			       N == 0.

