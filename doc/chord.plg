#define tSucc          5
#define tFix           5
#define tJoin          5
#define tStabilizeWait 5
#define tPingSoftState 5
#define tStap          5
#define succSize       5
#define fNum           5
#define fFixProb       0.5
#define t_Fix          5
#define tStab          5
#define tPing          5
#define local          "127.0.0.1:80"

/* The base tuples */
materialize(node,infinity,1, keys(1)).
materialize(bestSucc,tSucc*2,1,keys(1)).
materialize(finger,tFix*2,160,keys(2)).

materialize(succ,tSucc*2,16,keys(2)).
materialize(pred,infinity,1,keys(1)).
materialize(join,tJoin,5,keys(1)).
materialize(landmark,infinity,5,keys(1)).

materialize(stabilize,tStabilizeWait,5,keys(1)).
materialize(pingNode,tPingSoftState,infinity,keys(1)).  


/** Lookups */
lookupRes@R(R,K,S,SI,E) :- node@NI(NI,N),
        lookup@NI(NI,K,R,E), bestSucc@NI(NI,S,SI),
        K in id (N,S].

bestLookupDist@NI(NI,K,R,E,min<D>) :-
        lookup@NI(NI,K,R,E), finger@NI(NI,I,B,BI),
        node@NI(NI,N), B in id (N,K), D:=K -id B -id 1.

lookup@BI(min<BI>,K,R,E) :- node@NI(NI,N),
        bestLookupDist@NI(NI,K,R,E,D), B in id (N,K),
        finger@NI(NI,I,B,BI), D:=K -id B -id 1.


/** Neighbor Selection */
bestSuccDist@NI(NI,min<D>) :- node@NI(NI,N),
        succ@NI(NI,S,SI), D:=S -id N -id 1.

bestSucc@NI(NI,S,SI) :- succ@NI(NI,S,SI),
        bestSuccDist@NI(NI,D), node@NI(NI,N),
        D:=S -id N -id 1.

finger@NI(NI,0,S,SI) :- bestSuccessor@NI(NI,S,SI).


/** Successor eviction */
succCount(NI,count<*>) :- succ(NI,S,SI).

evictSucc@NI(NI) :- succCount@NI(NI,C), C > succSize.

maxSuccDist@NI(NI,max<D>) :- succ@NI(NI,S,SI),
        node@NI(NI,N), D:=S -id N -id 1,
        evictSucc@NI(NI).

delete succ@NI(NI,S,SI) :- succ@NI(NI,S,SI),
        maxSuccDist@NI(NI,D), node@NI(NI, N), D:=S -id N -id 1.


/** Finger fixing */
fFix@NI(NI,E,I) :- periodic@NI(NI,E,t_Fix),
        range(I,0,fNum-1), f_coinFlip(fFixProb) == 1.

lookup@NI(NI,K,NI,E) :- fFix@NI(NI,E,I),
        node(NI,N), K:=N +id 1 <<id I.

finger@NI(NI,I,B,BI) :- fFix@NI(NI,E,I),
        lookupRes@NI(NI,K,B,BI,E),
	K in id (N +id 1 <<id I,N), node@NI(NI,N).


/** Churn Handling */
pred@NI(local,null,"").

joinReq@LI(LI,N,NI,E) :- join@NI(NI,E),
        node@NI(NI,N), landmark@NI(NI,LI),
        LI != "".

succ@NI(NI,N,NI) :- landmark@NI(NI,LI),
        node@NI(NI,N), join@NI(NI,E),LI := "".

lookup@LI(LI,N,NI,E) :- joinReq@LI(LI,N,NI,E).

succ@NI(NI,S,SI) :- join@NI(NI,E),
        lookupRes@NI(NI,K,S,SI,E).


/** Stabilization */
stabilize@NI(NI,E) :- periodic@NI(NI,E,tStab).

stabilizeReq@SI(SI,NI,E) :- stabilize@NI(NI,E),
        bestSucc@NI(NI,S,SI).

sendPred@PI1(PI1,P,PI,E) :-
        stabilizeReq@NI(NI,PI1,E),
        pred@NI(NI,P,PI), PI!="-".

succ@NI(NI,P,PI) :- node(NI,N),
        sendPred@NI(NI,P,PI,E),
        bestSucc@NI(NI,S,SI), P in id (N,S),
        stabilize@NI(NI,E).

sendSucc@SI(SI,NI) :- stabilize@NI(NI,E),
        succ@NI(NI,S,SI).

succ@PI(PI,S,SI) :- sendSucc@NI(NI,PI),
        succ@NI(NI,S,SI).

notifyPred@SI(SI,N,NI) :- stabilize@NI(NI,E),
        node@NI(NI,N), successor@NI(NI,S,SI).

pred@NI(NI,P,PI) :- node@NI(NI,N),
        notifyPred@NI(NI,P,PI), pred@NI(NI,P1,PI1),
        ((PI1=="")||(P in id (P1,N))).


/** Connectivity Monitoring */
pingReq@PI(PI,NI,E,TS) :-
        periodic@NI(NI,E,tPing),
        pingNode@NI(NI,PI), TS:=now.

pingResp@RI(RI,NI,E,TS) :-
        pingReq@NI(NI,RI,E,TS).

latency@NI(NI,PI,L) :-
        pingReply@NI(NI,PI,E,TS),
        pingReq@NI(NI,PI,E,TS1), L:=now-TS1.

pingNode@NI(NI,SI) :- succ@NI(NI,S,SI).

succ@NI(NI,S,SI) :- succ@NI(NI,S,SI),
        latency@NI(NI,SI,L).

pingNode@NI(NI,FI) :- finger@NI(NI,I,B,BI).

finger@NI(NI,I,B,BI) :- finger@NI(NI,I,B,BI),
        latency@NI(NI,BI,L).
