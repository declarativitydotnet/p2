/* Narada $Id$

Try out with

tests/runOverLog doc/narada.plg NONE 0 127.0.0.1:10000 0 "neighbor=127.0.0.1:10001;"
*/



/** Real Narada (from the ESM paper)

    Member holds: address, last sequence number seen, local time when
    last sequence number was seen
    member@X(X, Address, Sequence, Time, Live)



    A refresh message to neighbors contains a bunch of entries.
    refresh@X(X, NewSequence, Address, ASequence).

    Each entry contains member address, last sequence.
    entry@X(X, Address, Sequence).

    My current sequence, starting with 0.



    To join, I start sending refreshes to my chosen neighbors.
*/


materialize(member, infinity, infinity, keys(2)).
materialize(sequence, infinity, 1, keys(2)).
materialize(env, infinity, infinity, keys(2,3)).
materialize(neighbor, infinity, infinity, keys(2)).

/*
watch(member).
watch(sequence).
watch(refreshSequence).
watch(refresh).
watch(membersFound).
*/

watch(report).


e0 neighbor@X(X,Y) :- periodic@X(X,E,0,1), env@X(X, H, Y),
  H=="neighbor".



/** Start with sequence 0 */
s0 sequence@X(X, Sequence) :- periodic@X(X, E, 0, 1), Sequence := 0.




/** Periodically start a refresh */

r1 refreshEvent@X(X) :- periodic@X(X, E, 3).



/** Increment my own sequence number */

r2 refreshSequence@X(X, NewSequence) :- refreshEvent@X(X), sequence@X(X,
  Sequence), NewSequence := Sequence + 1.


/** Save my incremented sequence */

r3 sequence@X(X, NewSequence) :- refreshSequence@X(X, NewSequence).



/** Send a refresh to all neighbors with my current membership */

r4 refresh@Y(Y, X, NewSequence, Address, ASequence, ALive) :-
  refreshSequence@X(X, NewSequence), member@X(X, Address, ASequence,
  Time, ALive), neighbor@X(X, Y).





/** How many member entries that match the member in a refresh message
(but not myself) do I have? */

r5 membersFound@X(X, Address, ASequence, ALive, count<*>) :-
  refresh@X(X, Y, YSequence, Address, ASequence, ALive), member@X(X,
  Address, MySequence, MyTime, MyLive), X != Address.



/** If I have none, just store the information I just received */

r6 member@X(X, Address, ASequence, T, ALive) :- membersFound@X(X,
  Address, ASequence, ALive, C), C == 0, T := f_now().


/** If I have some, just update with the information I received if it
has a higher sequence number. */

r7 member@X(X, Address, ASequence, T, ALive) :- membersFound@X(X,
  Address, ASequence, ALive, C), C > 0, T := f_now(), member@X(X, Address,
  MySequence, MyT, MyLive), MySequence < ASequence.


/** Update my neighbor's member entry */

r8 member@X(X, Y, YSequence, T, YLive) :- refresh@X(X, Y, YSequence, A,
  AS, AL), T := f_now(), YLive := 1.





/** Member updates if we have negation

If I receive a refresh and have no entry for the contents, store the
member (first bullet in Figure 2 of the ESM paper). Don't update
myself.

r5 member@X(X, Address, Sequence, T, Live) :- refresh@X(X, Y, Address,
  Sequence, Live), T := f_now(), not member@X(X, Address, MySequence,
  MyTime, MyLive), X != Address.



If I receive a refresh and already have an entry for the contents, but
my entry is older, replace it with contents (bullet 2.2 in Figure 2 of
the ESM paper). Don't update myself.

r6 member@X(X, Address, Sequence, T, Live) :- refresh@X(X, Y, Address,
  Sequence, Live), T := f_now(), member@X(X, Address, MySequence,
  MyTime, Live), MySequence < Sequence, X != Address.

*/










/** Add anyone from whom I receive a refresh message to my neighbors */

n1 neighbor@X(X, Y) :- refresh@X(X, Y, YS, A, AS, L).






/** Probing of neighbor liveness */

l1 neighborProbe@X(X) :- periodic@X(X, E, 1).

l2 deadNeighbor@X(X, Y) :- neighborProbe@X(X), T := f_now(),
  neighbor@X(X, Y), member@X(X, Y, YS, YT, L), T - YT > 20.

l3 delete neighbor@X(X, Y) :- deadNeighbor@X(X, Y).

l4 member@X(X, Neighbor, DeadSequence, T, Live) :- deadNeighbor@X(X,
  Neighbor), member@X(X, Neighbor, S, T1, L), Live := 0, DeadSequence :=
  S + 1, T:= f_now().






/** Reporting current members */

m1 reportEvent@X(X) :- periodic@X(X, E, 10).

m2 report@X(X, Y, S, D) :- reportEvent@X(X), member@X(X, Y, S, T, D).

























/* Half assed attempt at building a mesh, i.e., just something that looks correct and compiles. The problem is that addUtility and delUtility seem like event and do not work with latency events.



Materializations 
materialize(neighbor, infinity, 60, keys(2)).
materialize(member, infinity, 60, keys(2)).

The environment
materialize(env, infinity, infinity, keys(2,3)).


Setup configuration from environment

e0 neighbor(X,Y) :- periodic(X,E,0,1), env(X, H, Y), H=="neighbor".
e1 member(X,Y) :- periodic(X,E,5), env(X, H, Y), H=="hostname".





r0 gossipEvent(X) :- periodic(X,E,1).

r1 gossipPartner(X,Y) :- gossipEvent(X), neighbor(X,Y).

r2 member@Y(Y,Z) :- gossipPartner@X(X,Y), f_coinFlip(0.1) == 1, member@X(X,Z).






r3 request@Y(Y, X, E, T) :- periodic@X(X, E, 30), member@X(X,Y), T := f_now().

r4 reply@X(X, Y, E, T) :- request@Y(Y, X, E, T).

r5 latency@X(X, Y, T) :- reply@X(X, Y, E, T1), T := f_now() - T1.




r6 neighbor@X(X, Y) :- latency@X(X, Y, T), addUtility(X, Y, T).

r7 delete neighbor@X(X, Y) :- latency@X(X, Y, T), delUtility(X, Y, T).




/*










/* Honest attempt at building a mesh.  It failed. Members need to be
explicitly removed and stale members gossiped from others should be
ignored. We have no negation so we have to keep blasting all members to
every neighbor periodically.

Pings are complicated. You need to check for expired ping requests and
when you find them, stop pinging.

Materializations

materialize(neighbor, infinity, infinity, keys(2)).
materialize(member, infinity, 60, keys(2)).
materialize(env, infinity, infinity, keys(2,3)).
materialize(live, 10, infinity, keys(2)).
materialize(pingRequest, infinity, infinity, keys(3)).


watch(gossipEvent).
watch(gossipPartner).
watch(neighbor).
watch(request).
watch(reply).
watch(latency).
watch(member).
watch(report).
watch(update).
watch(remove).
watch(neighborSize).
watch(expired).
watch(pingUpdate).
watch(pingRequest).


e0 neighbor(X,Y) :- periodic(X,E,0,1), env(X, H, Y), H=="neighbor".

e1 member(X,Y) :- periodic(X,E,5), env(X, H, Y), H=="hostname".

r0 gossipEvent(X) :- periodic(X,E,1).

r1 gossipPartner(X,Y) :- gossipEvent(X), neighbor(X,Y).

r2 member@Y(Y,Z) :- gossipPartner@X(X,Y), f_rand() % 10 == 0, member@X(X,Z).




//Send a ping and store a record for later

r30 pingUpdate(X) :- periodic@X(X, E, 2).

r3 pingRequest@X(X,Y,E,T) :- pingUpdate(X), E := f_rand(), member@X(X,Y), T := f_now().

r31 request@Y(Y, X, E, T) :- pingRequest@X(X, Y, E, T).


//Echo the request

r4 reply@Y(Y,X,E,T) :- request@X(X,Y,E,T).


//Issue a latency event

r5 latency@X(X,Y,T) :- reply@X(X,Y,E,T1), T := 0 + (f_now() - T1).

//Remove a corresponding outstanding ping request

r6 delete pingRequest(X, Y, E, T) :- reply@X(X, Y, E, T).


// Flush out any expired ping requests
r7 expired(X, Y, E, T) :- pingUpdate(X), pingRequest(X,Y,E,T), T1 := f_now(), T1 - T > 4.
r71 delete pingRequest(X, Y, E, T) :- expired(X, Y, E1, T1).
r73 delete member(X, Y) :- expired(X, Y, E, T).




rrr report@X(X,Y) :- periodic(X,E,5), neighbor(X,Y).

l3 neighborSize@X(X, count<*>) :- neighbor(X, Y).
l1 live@X(X, Y, T) :- latency@X(X,Y,T).
l4 remove@X(X, Y, max<T>) :- neighborSize@X(X, C), C > 2, neighbor(X, Y), live(X, Y, T).
l2 update@X(X, Y) :- gossipEvent(X), live(X, Y, T).

*/






/* End of Narada */
