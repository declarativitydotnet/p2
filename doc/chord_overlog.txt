/*
 * 1.1 Chord
 * ---------
 */

/* The base tuples */
materialise(node, infinity, 1).
materialise(bestSucc, tSucc * 2, 1).
materialise(finger, tFix * 2, 160).

materialise(succ, tSucc * 2, 16).
materialise(pred, infinity, 1).
materialize(join, tJoin, 5).
materialize(landmark, infinity, 5).

materialize(stabilize, tStabilizeWait, 5).
materialize(pingNode, tPingSoftState, infinity).


/** Lookups |||3||| */

rule L1 lookupRes@R(R,K,S,SI,E) :- node@NI(NI,N), lookup@NI(NI,K,R,E),
	bestSucc@NI(NI,S,SI), K in (N,S].

rule L2 bestLookupDist@NI(NI,K,R,E,min<D>) :- lookup@NI(NI,K,R,E),
	finger@NI(NI,I,B,BI), node@NI(NI,N), B in (N,K), D=K-B-1.

rule L3 lookup@BI(min<BI>,K,R,E) :- node@NI(NI, N),
	bestLookupDist@NI(NI,K,R,E,D), B in (N,K).
	finger@NI(NI,I,B,BI), D=K-B-1.




/* Neighbor Selection |||3||| */

rule SU1 bestSuccDist@NI(NI,min<D>) :- node@NI(NI,N), succ@NI(NI,S,SI),
	D=S-N-1.

rule SU2 bestSucc@NI(NI,S,SI) :- succ@NI(NI,S,SI),
	bestSuccDist@NI(NI,D), node@NI(NI,N), D=S-N-1.

rule SU3 finger@NI(NI,0,S,SI) :-
	bestSuccessor@NI(NI,S,SI).





/* Successor eviction |||4||| */

rule SR1 succCount(NI,count<>) :- succ(NI,S,SI).

rule SR2 evictSucc@NI(NI) :- succCount@NI(NI,C), C >
 	succSize.

rule SR3 maxSuccDist@NI(NI,max<D>) :- succ@NI(NI,S,SI),
 	node@NI(NI,N), D = f_dist(N,S)-1, evictSucc@NI(NI).

rule SR4 delete@NI<succ(NI,S,SI)> :- succ@NI(NI,S,SI),
  	maxSuccDist@NI(NI,D), D=f_dist(N,S)-1.




/* Finger fixing |||3||| */

rule F1 fFix@NI(NI,E,I) :- periodic@NI(NI,E,t_Fix), I in [0, fNum),
	f_coinFlip(fFixProb).

rule F2 lookup@NI(NI,K,NI,E) :- fFix@NI(NI,E,I), node(NI,N), K = N + 1
	<< I.

rule F3 finger@NI(NI,I,B,BI) :- fFix@NI(NI,E,I),
	lookupRes@NI(NI,K,B,BI,E), K in (N + 1<<I, N), node@NI(NI,N).




/* Churn Handling |||5||| */

rule J1 pred@NI(ni,null,"").

rule J2 joinReq@LI(LI,N,NI,E) :- join@NI(NI,E), node@NI(NI,N),
	landmark@NI(NI,LI), LI != "".

rule J3 succ@NI(NI,N,NI) :- landmark@NI(NI,LI), node@NI(NI,N),
	join@NI(NI,E), LI = "".

rule J4 lookup@LI(LI,N,NI,E) :- joinReq@LI(LI,N,NI,E).

rule J5 succ@NI(NI,S,SI) :- join@NI(NI,E), lookupRes@NI(NI,K,S,SI,E).







/* Stabilization |||8||| */


rule S0 stabilize@NI(NI, E) :- periodic@NI(NI, E, t_Stab).


rule S1 stabilizeReq@SI(SI,NI,E) :- stabilize@NI(NI,E),
	bestSucc@NI(NI,S,SI).

rule S2 sendPred@PI1(PI1,P,PI,E) :- stabilizeReq@NI(NI,PI1,E),
	pred@NI(NI,P,PI), PI != "-".

rule S3 succ@NI(NI,P,PI) :- node(NI,N), sendPred@NI(NI,P,PI,E),
	bestSucc@NI(NI,S,SI), P in (N,S), stabilize@NI(NI,E).


rule S4 sendSucc@SI(SI,NI) :- stabilize@NI(NI, E),
	succ@NI(NI,S,SI).

rule S5 succ@PI(PI,S,SI) :- sendSucc@NI(NI,PI), succ@NI(NI,S,SI).



rule S6 notifyPred@SI(SI,N,NI) :- stabilize@NI(NI, E), node@NI(NI,N),
	successor@NI(NI,S,SI).

rule S7 pred@NI(NI,P,PI) :- node@NI(NI,N), notifyPred@NI(NI,P,PI),
	pred@NI(NI,P1,PI1), ((PI1 == "") || (P in (P1, N))).




/** Connectivity Monitoring */


rule C1 pingReq@PI(PI, NI, E, TS) :- periodic@NI(NI, E, tPing),
	pingNode@NI(NI, PI), TS = f_currentTime().

rule C2 pingResp@RI(RI, NI, E, TS) :- pingReq@NI(NI, RI, E, TS).

rule C3 latency@NI(NI, PI, L) :- pingReply@NI(NI, PI, E, TS),
	pingReq@NI(NI, PI, E, TS1), TS2 = f_currentTime(), L = TS2 -
	TS1.



rule CS1 pingNode@NI(NI,SI) :- succ@NI(NI,S,SI).

rule CS2 succ@NI(NI, S, SI) :- succ@NI(NI, S, SI), latency@NI(NI, SI,
	L).

rule CF1 pingNode@NI(NI,FI) :- finger@NI(NI,I,B,BI).

rule CF2 finger@NI(NI, I, B, BI) :- finger@NI(NI, I, B, BI),
	latency@NI(NI, BI, L).


