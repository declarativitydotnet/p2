#!@PYTHON@
import xmlrpclib
import libp2python
import sys
import os
import getopt
import socket
import getpass

files   = ["~/boost-1.32.0-6.i386.rpm", "~/libstdc++-4.0.0-8.i386.rpm",
           "~/p2-0.7.2-0.i386.rpm", "~/python-2.3.4-11.i386.rpm", "./planetlab.py", 
           "./p2"]
install = """\
sudo rpm -i --force libstdc++-4.0.0-8.i386.rpm; \
sudo rpm -i --force boost-1.32.0-6.i386.rpm; \
sudo rpm -i --force python-2.3.4-11.i386.rpm; \
sudo rpm -i --force p2-0.7.2-0.i386.rpm; \
sudo mv ~/p2 /etc/rc.d/init.d/"""
startup =  "sudo /sbin/service p2 restart"
stop    =  "sudo /sbin/service p2 stop"

def print_usage():
    print """
Usage: psetup.py [-j <parallel>] [-i] [-k] \\
                 [-Dvar=<value> [-Dvar=<value> [...]] -o <overlog>] \\
                 -n <slice_name> [<planetLabNode>]"""

def parse_cmdline(argv):
    shortopts = "ikn:j:o:D:"
    flags = {"overlog" : "", "kill" : False, "slice" : None, "parallel" : 1, \
             "env" : {}, "install" : False, "email" : None, "password" : None}
    opts, args = getopt.getopt(argv[1:], shortopts)
    for o, v in opts:
        if   o == "-n": flags["slice"]    = v
        elif o == "-j": flags["parallel"] = int(v)
        elif o == "-i": flags["install"]  = True
        elif o == "-k": flags["kill"]     = True
        elif o == "-o": flags["overlog"]  = v
        elif o == "-D": 
            d = v.split("=", 1)
            flags["env"][d[0]] = d[1].replace("\"", "\\\"")
        else:
            print_usage()
            exit(3)
    return flags, args

def getNodes():
  auth  = {}
  auth['AuthMethod'] = "anonymous"
  nodes = server.AnonSliceNodesList(auth, flags["slice"])
  sliceNodes = {}
  for n in nodes:
    sliceNodes[n] = True

  if flags["email"] and flags["password"]:
    auth['Username'] = flags["email"] 
    # always 'password', for password based authentication
    auth['AuthMethod'] = "password"
    auth['AuthString'] = flags["password"]
    # valid roles include, 'user', 'tech', 'pi', 'admin'
    auth['Role'] = "user"
    authorized = server.AdmAuthCheck( auth )
    if not authorized:
      print "You are not authorized on planetlab!"
      sys.exit(1)
    # an array of which fields to return from the node records.
    return_fields= ['hostname','boot_state']

    # get the all the nodes, regardless of current boot state
    all_nodes = server.AdmGetNodes(auth, [], return_fields)
    nodes = []
    for node_record in all_nodes:
      if node_record['boot_state'] == 'boot' and sliceNodes.has_key(node_record['hostname']):
        nodes.append(node_record['hostname'])
      elif sliceNodes.has_key(node_record['hostname']):
        print "ERROR: planetlab node %s is in state %s.\nRemoving %s from installation!\n" % \
              (node_record['hostname'], node_record['boot_state'], node_record['hostname'])
  return nodes

def startNode(node):
  pid = os.fork()
  if pid == 0:
    if flags["install"]:
      for f in files:
        os.system("scp %s %s@%s: >& /dev/null" % (f, flags["slice"], node))  
      os.system("ssh -l %s %s \"%s\" >& /dev/null" % (flags["slice"], node, install))
    if flags["overlog"]:
      os.system("scp %s %s@%s: >& /dev/null" % (flags["overlog"], flags["slice"], node))  
      os.system("ssh -f -l %s %s \"%s\" >& /dev/null" % \
                (flags["slice"], node, startup+" "+flags["overlog"].split("/")[-1]))
    else:
      os.system("ssh -f -l %s %s \"%s\" >& /dev/null" % \
                (flags["slice"], node, startup))
    sys.exit(0)
  return pid

def stopNode(node):
  pid = os.fork()
  if pid == 0:
    os.system("ssh -f -l %s %s \"%s\" >& /dev/null" % (flags["slice"], node, stop))
    sys.exit(0)
  return pid

if __name__ == "__main__":
  global flags, server
  libp2python.srand(libp2python.time())
  try:
    flags, args = parse_cmdline(sys.argv)
  except:
    print "EXCEPTION"
    print_usage()
    sys.exit(1)
  if not flags["slice"]:
    print_usage()
    sys.exit(1)
  server = xmlrpclib.Server('https://www.planet-lab.org/PLCAPI/')
  flags["email"]    = raw_input("PlanetLab Login: ") 
  flags["password"] = getpass.getpass() 

  if flags["overlog"]:
    try:
      if flags["env"]:
        envs = ""
        env = flags["env"]
        for var in env:
            envs += "-D" + var + "=" + env[var] + " "
        os.system("cpp -P %s %s %s.processed" % \
                  (envs, flags["overlog"], flags["overlog"]))
      else:
        os.system("cpp -P %s %s.processed" % (flags["overlog"], flags["overlog"]))
      flags["overlog"] = "%s.processed" % flags["overlog"]
    except:
      print "ERROR: open file error on file", flags["overlog"]

  if len(args) > 0:
    if flags["kill"]:
      pid = stopNode(args[0])
    else:
      pid = startNode(args[0])
    p, s = os.wait()
  else:
    pids  = {}
    nodes = getNodes()
    for n in nodes:
      if flags["kill"]:
        print "PlanetLab P2 kill on node", n
        pids[stopNode(n)] = n
      else:
        print "PlanetLab P2 install on node", n
        pids[startNode(n)] = n
      if len(pids) >= flags["parallel"]:
        p, s = os.wait()
        print "\tJob finished on planetLab node %s!" % pids[p]
        del pids[p]

    # Wait until everyone is done
    while pids:
      p, s = os.wait()
      print "\tJob finished on planetLab node %s!" % pids[p]
      del pids[p]
