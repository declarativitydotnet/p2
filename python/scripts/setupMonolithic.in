#!@PYTHON@
import xmlrpclib
import sys
import os
import signal
import getopt
import socket
import getpass
import time
import traceback

p2rpmversion = "@VERSION@"
p2rpm = "p2-" + p2rpmversion + "-0.i386.rpm"

#File classes
planetlabfile_root = ["python/scripts/monolithic.py",
                  	"python/scripts/p2monolithic"]
planetlabfileinstall = "sudo mv ~/p2monolithic /etc/rc.d/init.d/;"


#p2rpmfiles_root = ["rpms/" + p2rpm]
#p2rpminstall = "sudo rpm -i --force %s;" % p2rpm
p2rpmfiles_root = []
p2rpminstall = ""


otherrpmfiles_root = ["rpms/boost-1.32.0-6.i386.rpm",
                      "rpms/libstdc++-4.0.0-8.i386.rpm",
                      "rpms/python-2.3.4-11.i386.rpm",
		      "rpms/cpp-3.3.3-7.i386.rpm"]
otherrpminstall = """\
sudo rpm -i --force libstdc++-4.0.0-8.i386.rpm \
                    boost-1.32.0-6.i386.rpm \
                    python-2.3.4-11.i386.rpm \
		    cpp-3.3.3-7.i386.rpm;"""


p2rpmfiles = []
otherrpmfiles = []
planetlabfile = []



startup =  "echo \`hostname\` is restarting; sudo /sbin/service p2monolithic restart"
stop    =  "echo \`hostname\` is stopping; sudo /sbin/service p2monolithic stop"

def print_usage():
    print """
Usage: setupMonolithic.py [-d] [-a] [-t pingCheckPort] [-j <parallel>] [-(i|I)] [-k] \\
                 -s seed -g generatorScript -o <overlog>] \\
                 [-m master_addr -P node_port -p master_port -u username -w password] \\
                 -r rootDir(i.e., phi/phi/) -n <slice_name> [<planetLabNode>]"""

def parse_cmdline(argv):
    shortopts = "s:daIikn:j:o:D:m:p:t:u:w:r:P:"

    flags = {"dealloc" : False,
             "alloc" : False,
             "pingPort" : 0,
             "overlog" : "",
             "kill" : False,
             "slice" : None,
             "seed" : 0,
             "parallel" : 1,
             "env" : {},
             "install" : False,
             "all_install" : False,
             "email" : None,
             "password" : None,
             "master_addr" : None,
             "master_port" : None,
             "node_port" : None,
             "root" : "."}

    opts, args = getopt.getopt(argv[1:], shortopts)
    for o, v in opts:
        if   o == "-n": flags["slice"]       = v
        elif o == "-j": flags["parallel"]    = int(v)
        elif o == "-i": flags["install"]     = True
        elif o == "-I": flags["all_install"] = True
        elif o == "-k": flags["kill"]        = True
        elif o == "-a": flags["alloc"]       = True
        elif o == "-d": flags["dealloc"]     = True
        elif o == "-o": flags["overlog"]     = v
        elif o == "-m": flags["master_addr"] = v
        elif o == "-p": flags["master_port"] = v
        elif o == "-P": flags["node_port"] = v
        elif o == "-t": flags["pingPort"] = int(v)
        elif o == "-u": flags["email"] = str(v)
        elif o == "-s": flags["seed"] = int(v)
        elif o == "-w": flags["password"] = str(v)
        elif o == "-r": flags["root"] = str(v)
        elif o == "-D": 
            d = v.split("=", 1)
            flags["env"][d[0]] = d[1].replace("\"", "\\\"")
        else:
            print "Unrecognized option %s\n" % o
            print_usage()
            exit(3)

    # Initialize all paths with root directory
    for file in otherrpmfiles_root:
        otherrpmfiles.append("%s/%s" % (flags["root"], file))
    for file in p2rpmfiles_root:
        p2rpmfiles.append("%s/%s" % (flags["root"], file))
    for file in planetlabfile_root:
        planetlabfile.append("%s/%s" % (flags["root"], file))

    return flags, args

def getNodes():
  nodes = server.SliceNodesList(auth, flags["slice"])
  sliceNodes = {}
  for n in nodes:
    sliceNodes[n] = True

  # an array of which fields to return from the node records.
  return_fields= ['node_id', 'hostname','boot_state']
  # get the all the nodes, regardless of current boot state
  all_nodes = server.AdmGetNodes(auth, [], return_fields)
  nodes = []
  for node_record in all_nodes:
    if node_record['boot_state'] == 'boot' and sliceNodes.has_key(node_record['hostname']):
      nodes.append([node_record['node_id'], node_record['hostname']])
    elif sliceNodes.has_key(node_record['hostname']):
      print "ERROR: planetlab node %s is in state %s.\nRemoving %s from slice!\n" % \
            (node_record['hostname'], node_record['boot_state'], node_record['hostname'])
      server.SliceNodesDel(auth, flags["slice"], [node_record['hostname']])
  return nodes

def deallocNodes():
  nodes = server.SliceNodesList(auth, flags["slice"])
  server.SliceNodesDel(auth, flags["slice"], nodes)

def allocNodes():
  nodes = server.SliceNodesList(auth, flags["slice"])
  sliceNodes = {}
  for n in nodes:
    sliceNodes[n] = True

  sites  = {}
  for s in server.AdmGetSites(auth):
    sites[s['site_id']] = s

  siteNodes = server.AdmGetSiteNodes(auth)
  nodeSites = {}
  for s in siteNodes.keys():
    for n in siteNodes[s]:
      nodeSites[n] = int(s)
  
  # an array of which fields to return from the node records.
  return_fields= ['node_id', 'hostname','boot_state']
  # get all the nodes, regardless of current boot state
  all_nodes = server.AdmGetNodes(auth, [], return_fields)
  nodes = []
  for node in all_nodes:
    if sliceNodes.has_key(node['hostname']):
      site = sites[nodeSites[int(node['node_id'])]]
      if node['boot_state'] != 'boot' or not site['longitude'] or not site['latitude']:
        print "REMOVING NODE FROM SLICE: ", node['hostname']
        server.SliceNodesDel(auth, flags["slice"], [node['hostname']])
    elif node['boot_state'] == 'boot':
      site = sites[nodeSites[int(node['node_id'])]]
      if site['longitude'] and site['latitude']:
        nodes.append(node['hostname'])
  if nodes:
    print "Allocating %d nodes." % len(nodes)
    server.SliceNodesAdd(auth, flags["slice"], nodes)

def startNode(node):
  pid = os.fork()
  if pid == 0:
    # What's the seed of this node?
    mySeed = randint(0, sys.maxint)

    # Generate overlog file for this node
    nodeOverlog = "%s.%s" % (node, flags["overlog"])
    command = "%s %s %s > %s" % (flags["generator"], flags["overlog"],
                                 mySeed, nodeOverlog)
    os.system(command)

    
    # Setup the node
    install_files = planetlabfile
    install_cmd   = planetlabfileinstall
    if flags["all_install"]:
        install_files.extend(otherrpmfiles)
        install_cmd += otherrpminstall
        install_files.extend(p2rpmfiles)
        install_cmd += p2rpminstall
    if flags["install"]:
        install_files.extend(p2rpmfiles)
        install_cmd += p2rpminstall

    install_files.append(nodeOverlog)


    filelist = ""
    for file in install_files:
        filelist += file + " "
#    print "Copying files '%s' to node %s'\n" % (filelist, node)
    os.system("rsync %s %s@%s: >& /dev/null" % (filelist, flags["slice"], node))  

#    print "Executing command(s) '%s' at node %s\n" % (install_cmd, node)
    os.system("ssh -l %s %s \"%s\" >& /dev/null" % (flags["slice"], node, install_cmd))


    start = startup + " " + \
            nodeOverlog + " " + \
            str(flags["slice"]) + " " + \
            flags["port"] + " " + \
            str(flags["pingPort"]) + " " + \
            mySeed

    pong = False
    for i in range(2):
      #      print "Starting node %s with command: %s" % (node, start)
      os.system("ssh -f -l %s %s \"%s\" ; true ; true ;" % \
                (flags["slice"], node, start+" "+flags["overlog"].split("/")[-1]))
      if flags["pingPort"] > 0:
        pong = False
        for i in range(5):
          try:
            time.sleep(10 + 2*i)
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((node, flags["pingPort"]))
            tm = s.recv(1024)
            pong = True
            break
          except:
            pass
        if pong: break 

    if flags["pingPort"] > 0 and not pong:
      print "UNABLE TO GET PING FROM NODE %s!" % node
      # server.SliceNodesDel(auth, flags["slice"], [node])
    sys.exit(0)
  return pid

def timeoutHandler(signum, frame):
  if signum == signal.SIGALRM:
    print "NODE TIMEOUT!"
    for k in pids.keys():
      print "\tTIMEOUT NODE: ", pids[k]
      os.kill(k, signal.SIGKILL)
      # server.SliceNodesDel(auth, flags["slice"], [pids[k]])
  else:
    print "UNKNOWN SIGNAL: ", signum
  return 0

def stopNode(node):
  pid = os.fork()
  if pid == 0:
    os.system("ssh -l %s %s \"%s\" >& /dev/null" % (flags["slice"], node, stop))
    sys.exit(0)
  return pid

if __name__ == "__main__":
  global flags, server, auth, pids
  try:
      flags, args = parse_cmdline(sys.argv)
  except:
      print "Parse Command Line Exception in user code:"
      print '-'*60
      traceback.print_exc(file=sys.stdout)
      print '-'*60
      print_usage()
      sys.exit(1)
  if not flags["slice"]:
    print_usage()
    sys.exit(1)

  seed(flags["seed"])
  pids  = {}
  auth  = {}
  auth['AuthMethod'] = "anonymous"
  server = xmlrpclib.Server('https://www.planet-lab.org/PLCAPI/')
  if (not flags["email"]) or (not flags["password"]):
    flags["email"]    = raw_input("PlanetLab Login: ") 
    flags["password"] = getpass.getpass() 

  if flags["email"] and flags["password"]:
    auth['Username'] = flags["email"] 
    # always 'password', for password based authentication
    auth['AuthMethod'] = "password"
    auth['AuthString'] = flags["password"]
    # valid roles include, 'user', 'tech', 'pi', 'admin'
    auth['Role'] = "user"
    authorized = server.AdmAuthCheck( auth )
    if not authorized:
      print "You are not authorized to access planetlab's slice management interface!"
      sys.exit(1)

  if flags["overlog"]:
    try:
      if flags["env"]:
        envs = ""
        env = flags["env"]
        for var in env:
            envs += "-D" + var + "=" + env[var] + " "
        os.system("cpp -P %s %s %s.processed" % \
                  (envs, flags["overlog"], flags["overlog"]))
      else:
        os.system("cpp -P %s %s.processed" % (flags["overlog"], flags["overlog"]))
      flags["overlog"] = "%s.processed" % flags["overlog"]
    except:
      print "ERROR: open file error on file", flags["overlog"]

  if flags["alloc"]:
    allocNodes()
  elif flags["dealloc"]:
    deallocNodes()
  elif len(args) > 0:
    if flags["kill"]:
      pid = stopNode(args[0])
    else:
      pid = startNode(args[0])
    p, s = os.wait()
  else:
    nodes = getNodes()
    for n in nodes:
      nodeid   = n[0]
      hostname = n[1]
      if flags["kill"]:
        # print "PlanetLab P2 kill on node %s" % hostname
        pids[stopNode(hostname)] = hostname
      else:
        # print "PlanetLab P2 install on node %s" % hostname
        pids[startNode(hostname)] = hostname
      if len(pids) >= flags["parallel"]:
        p, s = os.wait()
        # print "\tJob finished on planetLab node %s!" % pids[p]
        del pids[p]

    # Wait until everyone is done
    signal.signal(signal.SIGALRM, timeoutHandler)
    while pids:
      try:
        signal.alarm(300)
        p, s = os.wait()
        # print "\tJob finished on planetLab node %s!" % pids[p]
        del pids[p]
      except:
        pass
