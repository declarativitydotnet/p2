#!@PYTHON@
##
## This file is distributed under the terms in the attached LICENSE file.
## If you do not find this file, copies can be found by writing to:
## Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300,
## Berkeley, CA, 94704.  Attention:  Intel License Inquiry.
## Or
## UC Berkeley EECS Computer Science Division, 387 Soda Hall #1776, 
## Berkeley, CA,  94707. Attention: P2 Group.
## 
## DESCRIPTION: Non-incremental dissemination agent for Planetlab
##
import xmlrpclib
import sys
import os
import signal
import getopt
import socket
import getpass
import time
import traceback
import random

p2rpmversion = "@VERSION@"
p2rpm = "p2-" + p2rpmversion + "-0.i386.rpm"

#File classes
planetlabfile_root = ["python/scripts/monolithic.py",
                      "python/scripts/p2monolithic"]
planetlabfileinstall = "chmod 755 p2monolithic;"


#p2rpmfiles_root = ["rpms/" + p2rpm]
#p2rpminstall = "sudo rpm -i --force %s;" % p2rpm
p2rpmfiles_root = []
p2rpminstall = ""


#otherrpmfiles_root = ["rpms/boost-1.32.0-6.i386.rpm",
#                      "rpms/libstdc++-4.0.0-8.i386.rpm",
#                      "rpms/python-2.3.4-11.i386.rpm",
#		      "rpms/cpp-3.3.3-7.i386.rpm"]
#otherrpminstall = """\
#sudo rpm -i --force libstdc++-4.0.0-8.i386.rpm \
#                    boost-1.32.0-6.i386.rpm \
#                    python-2.3.4-11.i386.rpm \
#		    cpp-3.3.3-7.i386.rpm;"""
#
otherrpmfiles_root = []
otherrpminstall = "sudo yum -y install boost cpp;"




p2rpmfiles = []
otherrpmfiles = []
planetlabfile = []



startup =  "echo \`hostname\` is restarting; bash p2monolithic restart"
stop    =  "echo \`hostname\` is stopping; bash p2monolithic stop"

def print_usage():
    print """
Usage: setupMonolithic.py -d  //deallocate all slide nodes
                 [-u username (ask user)]
                 [-w password (ask user)]
                 -n <slice_name>
or:    setupMonolithic.py -a  //allocate all nodes to slice
                 [-u username (ask user)]
                 [-w password (ask user)]
                 -n <slice_name>
or:    setupMonolithic.py -k  //kill all nodes in slice
                 [-u username (ask user)]
                 [-w password (ask user)]
                 -n <slice_name>
                 [-z <planetLabNode>] // exclude from action
                 [-l <planetLabNode>] // include in action
or:    setupMonolithic.py -c  //setup all nodes in slice
                 [-i]         //install new executables
                 [-I]         //install everything
                 [-t pingCheckPort (10001)]
                 [-j <parallel>] //how many nodes at a time?
                 [-s seed (0)]
                 [-g generatorScript (cpp)]
                 -o <overlog>
                 -x <runOverLog file>
                 [-p <port> (10000)]
                 [-u username (ask user)]
                 [-w password (ask user)]
                 [-r rootDir(i.e., phi/phi/) (.)]
                 [-D<key>=<value>]
                 -n <slice_name>
                 [-z <planetLabNode>] // exclude from action
                 [-l <planetLabNode>] // include in action
or:    setupMonolithic.py -h  //Usage hints (this page)
"""

def parse_cmdline(argv):
    shortopts = "dakchs:Iij:o:D:n:p:t:u:w:r:g:x:z:l:"

    flags = {"dealloc" : False,
             "alloc" : False,
             "kill" : False,
             "create" : False,
             "email" : None,
             "password" : None,
             "install" : False,
             "all_install" : False,
             "slice" : None,
             "pingPort" : 10001,
             "parallel" : 1,
             "seed" : 0,
             "generator" : None,
             "overlog" : None,
             "port" : 10000,
             "root" : ".",
             "env" : {},
             "help" : False,
             "exclude" : [],
             "include" : [],
             "executable" : None}

    opts, args = getopt.getopt(argv[1:], shortopts)
    for o, v in opts:
        if   o == "-a": flags["alloc"] = True
        elif o == "-d": flags["dealloc"] = True
        elif o == "-k": flags["kill"] = True
        elif o == "-c": flags["create"] = True
        elif o == "-n": flags["slice"] = v
        elif o == "-u": flags["email"] = str(v)
        elif o == "-w": flags["password"] = str(v)
        elif o == "-i": flags["install"] = True
        elif o == "-I": flags["all_install"] = True
        elif o == "-t": flags["pingPort"] = int(v)
        elif o == "-j": flags["parallel"] = int(v)
        elif o == "-s": flags["seed"] = int(v)
        elif o == "-g": flags["generator"] = str(v)
        elif o == "-o": flags["overlog"] = v
        elif o == "-p": flags["port"] = v
        elif o == "-r": flags["root"] = str(v)
        elif o == "-x": flags["executable"] = str(v)
        elif o == "-z": flags["exclude"].append(str(v))
        elif o == "-l": flags["include"].append(str(v))
        elif o == "-D": 
          d = v.split("=", 1)
          flags["env"][d[0]] = d[1].replace("\"", "\\\"")
        elif o == "-h": flags["help"] = True
        else:
          print "Unhandled option %s\n" % o
          sys.exit(3)

    # Initialize all paths with root directory
    for file in otherrpmfiles_root:
        otherrpmfiles.append("%s/%s" % (flags["root"], file))
    for file in p2rpmfiles_root:
        p2rpmfiles.append("%s/%s" % (flags["root"], file))
    for file in planetlabfile_root:
        planetlabfile.append("%s/%s" % (flags["root"], file))
    planetlabfile.append(flags["executable"])

    return flags, args




def getNodes():
  nodes = server.SliceNodesList(auth, flags["slice"])
  sliceNodes = {}
  for n in nodes:
    sliceNodes[n] = True

  # an array of which fields to return from the node records.
  return_fields= ['node_id', 'hostname','boot_state']
  # get the all the nodes, regardless of current boot state
  all_nodes = server.GetNodes(auth, {}, return_fields)
  nodes = []
  for node_record in all_nodes:
    if node_record['boot_state'] == 'boot' and sliceNodes.has_key(node_record['hostname']):
      nodes.append([node_record['node_id'], node_record['hostname']])
    elif sliceNodes.has_key(node_record['hostname']):
      print "ERROR: planetlab node %s is in state %s.\nRemoving %s from slice!\n" % \
            (node_record['hostname'], node_record['boot_state'], node_record['hostname'])
      server.SliceNodesDel(auth, flags["slice"], [node_record['hostname']])
  return nodes

def deallocNodes():
  nodes = server.SliceNodesList(auth, flags["slice"])
  server.SliceNodesDel(auth, flags["slice"], nodes)

def allocNodes():
  nodes = server.SliceNodesList(auth, flags["slice"])
  sliceNodes = {}
  for n in nodes:
    sliceNodes[n] = True

  sites  = {}
  for s in server.GetSites(auth):
    sites[s['site_id']] = s

  siteNodes = server.GetSiteNodes(auth)
  nodeSites = {}
  for s in siteNodes.keys():
    for n in siteNodes[s]:
      nodeSites[n] = int(s)
  
  # an array of which fields to return from the node records.
  return_fields= ['node_id', 'hostname','boot_state']
  # get all the nodes, regardless of current boot state
  all_nodes = server.GetNodes(auth, {}, return_fields)
  nodes = []
  for node in all_nodes:
    if sliceNodes.has_key(node['hostname']):
      site = sites[nodeSites[int(node['node_id'])]]
      if node['boot_state'] != 'boot' or not site['longitude'] or not site['latitude']:
        print "REMOVING NODE FROM SLICE: ", node['hostname']
        server.SliceNodesDel(auth, flags["slice"], [node['hostname']])
    elif node['boot_state'] == 'boot':
      site = sites[nodeSites[int(node['node_id'])]]
      if site['longitude'] and site['latitude']:
        nodes.append(node['hostname'])
  if nodes:
    print "Allocating %d nodes." % len(nodes)
    server.SliceNodesAdd(auth, flags["slice"], nodes)




def startNode(node, envs):
  print "Starting node %s with environment %s" % (node, str(envs))
  mySeed = random.randint(0, sys.maxint)
  pid = os.fork()
  if pid == 0:
    # What's the seed of this node?

    # Generate overlog file for this node
    nodeOverlog = "%s.%s" % (node, flags["overlog"].split("/")[-1])
    if flags["generator"]:
      command = "%s %s %s %s %s %s %s" % (flags["generator"],
                                          flags["overlog"],
                                          mySeed,
                                          node,
                                          flags["port"],
                                          nodeOverlog,
                                          envs)
      os.system(command)
    else:
      # Just run CPP
      command = "cpp -P -C %s %s %s" % (envs, \
                                        flags["overlog"], \
                                        nodeOverlog)
      os.system(command)
      
    # Setup the node
    planetlabfile.append(nodeOverlog)

    install_files = planetlabfile
    install_cmd   = planetlabfileinstall
    install_files.extend(otherrpmfiles)
    install_files.extend(p2rpmfiles)
    if flags["all_install"]:
        install_cmd += otherrpminstall
        install_cmd += p2rpminstall
    if flags["install"]:
        install_cmd += p2rpminstall



    filelist = ""
    for file in install_files:
        filelist += file + " "
    command = "rsync %s %s@%s: >& /dev/null" % (filelist, flags["slice"], node)
    print "Resyncing with %s" % command
    os.system(command)
    
    #    print "Executing command(s) '%s' at node %s\n" % (install_cmd, node)

    command = "ssh -l %s %s \"%s\" >& /dev/null" % (flags["slice"], node, install_cmd)
    print "Executing with %s\n" % command
    os.system(command)


    start = startup + " " + \
            nodeOverlog + " " + \
            str(flags["slice"]) + " " + \
            flags["port"] + " " + \
            str(flags["pingPort"]) + " " + \
            str(mySeed) + " "

    pong = False
    for i in range(2):
      #      print "Starting node %s with command: %s" % (node, start)
      command = "ssh -f -l %s %s \"%s\" ; true ; true ;" % \
                (flags["slice"], node, start)
      print "Starting with %s\n" % command
      os.system(command)
      if flags["pingPort"] > 0:
        pong = False
        for i in range(5):
          try:
            time.sleep(10 + 2*i)
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((node, flags["pingPort"]))
            tm = s.recv(1024)
            pong = True
            break
          except:
            pass
        if pong: break 

    if flags["pingPort"] > 0 and not pong:
      print "UNABLE TO GET PING FROM NODE %s!" % node
      # server.SliceNodesDel(auth, flags["slice"], [node])
    sys.exit(0)
  return pid

def timeoutHandler(signum, frame):
  if signum == signal.SIGALRM:
    print "NODE TIMEOUT!"
    for k in pids.keys():
      print "\tTIMEOUT NODE: ", pids[k]
      os.kill(k, signal.SIGKILL)
      # server.SliceNodesDel(auth, flags["slice"], [pids[k]])
  else:
    print "UNKNOWN SIGNAL: ", signum
  return 0

def stopNode(node):
  pid = os.fork()
  if pid == 0:
    os.system("ssh -l %s %s \"%s\"" % (flags["slice"], node, stop))
    sys.exit(0)
  return pid

if __name__ == "__main__":
  global flags, server, auth, pids
  try:
      flags, args = parse_cmdline(sys.argv)
  except:
      print "Parse Command Line Exception in user code:"
      print '-'*60
      traceback.print_exc(file=sys.stdout)
      print '-'*60
      print_usage()
      sys.exit(1)
  if flags["help"]:
    print_usage()
    sys.exit(0)
  if len(args) > 0:
    print "No loose arguments are expected (%s). Everything should be an \
    option.\n" % str(args)
    print_usage()
    sys.exit(1)


  # Sanity checks
  choices = (flags["dealloc"]) \
            + (flags["alloc"]) \
            + (flags["kill"]) \
            + (flags["create"])
  if choices != 1:
    print "Must have exactly one of -d, -a, -k, -c, or -h"
    print_usage()
    sys.exit(1)
  if not flags["slice"]:
    print "Must have a slice name (with -n)"
    print_usage()
    sys.exit(1)
  if flags["create"] and (not flags["overlog"] or not flags["executable"]):
    print "Must have an overlog and an executable file name to start an experiment"
    print_usage()
    sys.exit(1)
    

  #Fetch username and password (for all instances of the command)
  auth  = {}
  auth['AuthMethod'] = "anonymous"
  server = xmlrpclib.Server('https://www.planet-lab.org/PLCAPI/')
  if (not flags["email"]):
    flags["email"]    = raw_input("PlanetLab Login: ") 
  if (not flags["password"]):
    flags["password"] = getpass.getpass() 
  if flags["email"] and flags["password"]:
    auth['Username'] = flags["email"] 
    # always 'password', for password based authentication
    auth['AuthMethod'] = "password"
    auth['AuthString'] = flags["password"]
    # valid roles include, 'user', 'tech', 'pi', 'admin'
    auth['Role'] = "user"
    authorized = server.AuthCheck( auth )
    if not authorized:
      print "You are not authorized to access planetlab's slice management interface!"
      sys.exit(1)


  #Now figure which command we're running
  if flags["dealloc"]:
    deallocNodes()
    sys.exit(0)
  elif flags["alloc"]:
    allocNodes()
    sys.exit(0)
  elif flags["kill"] or flags["create"]:
    allNodes = []
    excluded = flags["exclude"]
    if len(flags["include"]) > 0:
      # We have explicit nodes we're talking to
      for node in flags["include"]:
        if (node not in excluded):
          allNodes.append(node)
    else:
      siteNodes = getNodes()
      for n in siteNodes:
        nodeid   = n[0]
        hostname = n[1]
        if (hostname not in excluded):
          allNodes.append(hostname)

    #Now allNodes contains all the nodes we want to talk to
    print "Will address nodes %s\n" % (str(allNodes))
    pids  = {}
    if flags["kill"]:
      for node in allNodes:
        pids[stopNode(node)] = node
        if len(pids) >= flags["parallel"]:
          p, s = os.wait()
          # print "\tJob finished on planetLab node %s!" % pids[p]
          del pids[p]
    else:
      random.seed(flags["seed"])
      
      envs = ""
      # Set up the definitions string
      if flags["env"]:
        envs = ""
        env = flags["env"]
        for var in env:
          envs += "-D" + var + "=" + env[var] + " "
          
      for node in allNodes:
        pids[startNode(node, envs)] = node
        if len(pids) >= flags["parallel"]:
          p, s = os.wait()
          # print "\tJob finished on planetLab node %s!" % pids[p]
          del pids[p]
      
    #Now wait until they're done
    signal.signal(signal.SIGALRM, timeoutHandler)
    while pids:
      try:
        signal.alarm(300)
        p, s = os.wait()
        # print "\tJob finished on planetLab node %s!" % pids[p]
        del pids[p]
      except:
        pass
