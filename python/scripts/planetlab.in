#!@PYTHON@
import xmlrpclib
import libp2python
import sys
import os
import getopt
import socket

def print_usage():
    print """Usage: planetlab.py [-s <seed>] [-o <overlog>] \\
                    -m master_addr -p master_port -n <slice_name> <port>"""

def parse_cmdline(argv):
    shortopts = "s:o:n:m:p:"
    flags = {"overlog" : None, "slice" : None, "master_addr" : None, "master_port" : None}
    opts, args = getopt.getopt(argv[1:], shortopts)
    for o, v in opts:
        if   o == "-o": flags["overlog"]     = v
        elif o == "-n": flags["slice"]       = v
        elif o == "-m": flags["master_addr"] = v
        elif o == "-p": flags["master_port"] = int(v)
        elif o == "-s": libp2python.srand(int(v))
        else:
            print_usage()
            exit(3)
    return flags, args

def sliceEventHandler(event):
  # Get the list of nodes in the slice
  auth= {}
  auth['AuthMethod'] = "anonymous"
  nodes = server.AnonSliceNodesList(auth, flags["slice"])

  for n in nodes:
    if n == host:
      continue	# Ignore myself
    tp = libp2python.Tuple.mk()
    tp.append(libp2python.Val_Str.mk("sliceNodeEvent"))	# Event name
    tp.append(event.at(1)) 			 	# Local IP address
    tp.append(libp2python.Val_Str.mk(n + ":" + port))	# PlanetLab node address
    tp.freeze()
    p2.tuple(tp) 

def linkHandler(event):
  tuple = "L,"
  tuple += event.at(1).toString()	# Local IP address
  tuple += event.at(2).toString()	# Neighbor
  report(tuple)
  
def installHandler(event):
  tuple = "I,"
  tuple += event.at(1).toString()	# Local IP address
  tuple += event.at(3).toString()	# Program name
  report(tuple)

def report(tuple):
  pid = os.fork()
  if pid == 0:
    try:
      print >> log, tuple
      #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      #s.connect((flags["master_addr"], flags["master_port"]))
      #s.send(tuple)
      #s.close()
    except:
      print "EXCEPTION: %s\n" % str(sys.exc_info()[:2])
      print "UNABLE TO SEND TUPLE TO: %s:%s" % (flags["master_addr"], flags["master_port"])
    sys.exit(0)

if __name__ == "__main__":
  global flags, p2, server, host, port, log
  libp2python.srand(libp2python.time())
  try:
    flags, args = parse_cmdline(sys.argv)
  except:
    print_usage()
    sys.exit(1)
  if len(args) < 1 or not flags["slice"]:
    print_usage()
    sys.exit(1)

  host   = socket.gethostname()
  port   = args[0]
  server = xmlrpclib.Server('https://www.planet-lab.org/PLCAPI/')
  p2     = libp2python.P2(host, port)
  log    = open("home/irb_p2/planetlab.log", 'w')

  if flags["overlog"]:
    # Read in the optional overlog program 
    file = open(flags["overlog"], 'r') 
    overlog = file.read()
    file.close()
    # Install the bootstrap overlog
    p2.install("overlog", overlog)

  # Install event triggers
  p2.subscribe("sliceEvent", sliceEventHandler)
  p2.subscribe("overlogInstall", installHandler)
  p2.subscribe("linkEvent", linkHandler)

  report("R,"+host)

  # Run the system
  p2.run()
