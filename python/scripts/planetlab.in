#!@PYTHON@
import xmlrpclib
import libp2python
import sys
import os
import getopt
import socket

def print_usage():
    print """Usage: planetlab.py [-s <seed>] [-o <overlog>] [-t pingPort] \\
                    -m master_addr -l logfile -p master_port -n <slice_name> <port>"""

def parse_cmdline(argv):
  shortopts = "t:s:o:n:m:p:l:"
  flags = {"pingPort" : 0, "overlog" : None, "slice" : None, "master_addr" : None, "master_port" : None, "logFile" : "planetlab.log"}
  opts, args = getopt.getopt(argv[1:], shortopts)
  for o, v in opts:
    if   o == "-o": flags["overlog"]     = v
    elif o == "-n": flags["slice"]       = v
    elif o == "-m": flags["master_addr"] = v
    elif o == "-p": flags["master_port"] = int(v)
    elif o == "-t": flags["pingPort"]    = int(v)
    elif o == "-l": flags["logFile"] = str(v)
    elif o == "-s": libp2python.srand(int(v))
    else:
      print_usage()
      exit(3)
  return flags, args

def sliceEventHandler(event):
  # Get the list of nodes in the slice
  auth= {}
  auth['AuthMethod'] = "anonymous"
  nodes = server.AnonSliceNodesList(auth, flags["slice"])

  for i in range(len(nodes)):
    if nodes[i] == host:
      del nodes[i]
      break

  for i in range(len(nodes)):
    tp = libp2python.Tuple.mk()
    tp.append(libp2python.Val_Str.mk("sliceNodeEvent"))	# Event name
    tp.append(event.at(1)) 			 	# Local IP address
    tp.append(libp2python.Val_Str.mk(nodes[i] + ":" + port))	# PlanetLab node address
    tp.append(libp2python.Val_UInt32.mk(i))
    tp.freeze()
    p2.tuple(tp) 

def displayHandler(event):
  tuple = event.at(2).toString() 	# display type 
  for i in range(event.size()):
    if i > 2:
      tuple += "," + event.at(i).toString()
  report(tuple)
  
def report(tuple):
  try:
    visSocket.send(tuple + "\n")
    print >> log, tuple
  except:
    print "EXCEPTION: %s\n" % str(sys.exc_info()[:2])
    print "UNABLE TO SEND TUPLE TO: %s:%s" % (flags["master_addr"], flags["master_port"])

def pingCheck(port):
  pid = os.fork()
  if pid == 0:
    try:
      s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      s.bind(('', port))
      s.listen(10)
      while True:
        client, addr = s.accept()
        client.send("PONG: " + host)
        client.close()
    except:
      print "PINGCHECK EXCEPTION: %s\n" % str(sys.exc_info()[:2])

if __name__ == "__main__":
  global flags, p2, server, host, port, log, visSocket
  libp2python.srand(libp2python.time())
  try:
    flags, args = parse_cmdline(sys.argv)
  except:
    print_usage()
    sys.exit(1)
  if len(args) < 1 or not flags["slice"]:
    print_usage()
    sys.exit(1)

  visSocket = None
  host   = socket.gethostname()
  port   = args[0]
  server = xmlrpclib.Server('https://www.planet-lab.org/PLCAPI/')
  p2     = libp2python.P2(host, port, libp2python.P2.TransportConf.NONE)
  # p2     = libp2python.P2(host, port)
  log    = open("/home/%s/%s" % (flags["slice"], flags["logFile"]), 'w')

  if flags["overlog"]:
    # Read in the optional overlog program 
    file = open(flags["overlog"], 'r') 
    overlog = file.read()
    file.close()
    # Install the bootstrap overlog
    p2.install("overlog", overlog)

  # Install event triggers
  p2.subscribe("sliceEvent", sliceEventHandler)
  if flags["master_addr"] == host:
    print "Starting up visualization tunnel\n"
    visSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    visSocket.connect(("localhost", flags["master_port"]))
    p2.subscribe("installEvent", displayHandler)
    p2.subscribe("tokenEvent", displayHandler)
    p2.subscribe("bestSuccEvent", displayHandler)
    p2.subscribe("pathEvent", displayHandler)

  if flags["pingPort"] > 0: pingCheck(flags["pingPort"])

  # Run the system
  p2.run()
