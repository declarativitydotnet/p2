/*
 * @(#)$Id$
 *
 * Copyright (c) 2005 Intel Corporation
 *
 * This file is distributed under the terms in the attached INTEL-LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300,
 * Berkeley, CA, 94704.  Attention:  Intel License Inquiry.
 * 
 * DESCRIPTION: P2Chord in Overlog
 *
 */


/*
#define tSucc          5
#define tFix           5
#define tJoin          5
#define tStabilizeWait 5
#define tPingSoftState 5
#define tStap          5
#define succSize       5
#define fNum           5
#define fFixProb       0.5
#define t_Fix          5
#define tStab          5
#define tPing          5
#define local          "127.0.0.1:80"
*/

/* The base tuples */

materialize(node, infinity, 1, keys(1)).
materialize(finger, 180, 160, keys(2)).
materialize(bestSucc, infinity, 1, keys(1)).
materialize(succ, 10, 100, keys(2)).
materialize(pred, infinity, 100, keys(1)).
materialize(succCount, infinity, 1, keys(1)).
materialize(bestSuccCount, infinity, 1, keys(1)).
materialize(join, 30, 10, keys(1,2)).
materialize(landmark, infinity, 1, keys(1)).
materialize(fFix, infinity, 160, keys(2)).  
materialize(nextFingerFix, infinity, 1, keys(1)).  
materialize(pingNode, 10, infinity, keys(2)).  
materialize(pendingPing, 10, infinity, keys(2)).  

node(IPADDRESS, NODEID).
pred(IPADDRESS, 0x0I, "--").
nextFingerFix(IPADDRESS, 0).
landmark(IPADDRESS, LANDMARK).

/** Lookups */

/*
watch(lookupResults).
watch(lookup).
watch(bestLookupDist).
*/

l1 lookupResults@R(R,K,S,SI,E) :- node@NI(NI,N),
				  lookup@NI(NI,K,R,E), 
				  bestSucc@NI(NI,S,SI),
				  (K in (N,S] || (N == S)).


l2 bestLookupDist@NI(NI,K,R,E,min<D>) :- node@NI(NI,N), 
					 lookup@NI(NI,K,R,E), 
					 finger@NI(NI,I,B,BI), 
					 D:=K - B - 1, 
					 B in (N,K).


l3 lookup@BI(min<BI>,K,R,E) :- node@NI(NI,N),	    
			       bestLookupDist@NI(NI,K,R,E,D), 
			       finger@NI(NI,I,B,BI), 
			       D == K - B - 1,
			       B in (N,K).



/** Neighbor Selection */

/*
watch(bestSucc).
watch(bestSuccDist).
*/

n2 succEvent@NI(NI, S, SI) :- succ@NI(NI, S, SI).

n3 bestSuccDist@NI(NI,S,SI,min<D>) :- node@NI(NI,N),
			              succ@NI(NI,S,SI), 
			              succEvent@NI(NI,SS,SII), 
			              D:=S - N - 1.

n4 bestSucc@NI(NI,S,SI) :- bestSuccDist@NI(NI,S,SI,D). 

n5 finger@NI(NI,0,S,SI) :- bestSucc@NI(NI,S,SI).


/** Successor eviction */

/*watch(succCount).
watch(evictSucc).
watch(maxSuccDist).*/

s1 succCount@NI(NI,count<*>) :- succ@NI(NI,S,SI).

s2 evictSucc@NI(NI) :- succCount@NI(NI,C), 
		    C > 2.

s3 maxSuccDist@NI(NI,max<D>) :- succ@NI(NI,S,SI),
				node@NI(NI,N), 
				evictSucc@NI(NI),
				D:=S - N - 1.

s4 delete succ@NI(NI,S,SI) :- node@NI(NI,N), 
			      succ@NI(NI,S,SI),
			      maxSuccDist@NI(NI,D), 
			      D == S - N - 1.

/** Finger fixing */

/*watch(fFixEvent).
watch(fFix).
watch(fFixPeriodic).
watch(eagerFinger).
watch(nextFingerFix).
watch(finger).
*/

f1 fFix@NI(NI,E,I) :- periodic@NI(NI,E,10), 
		   nextFingerFix@NI(NI,I).

f2 fFixEvent@NI(NI,E,I) :- fFix@NI(NI,E,I).

f3 lookup@NI(NI,K,NI,E) :- fFixEvent@NI(NI,E,I),
			   node@NI(NI,N), 
			   K:=0x1I << I + N.

f4 eagerFinger@NI(NI,I,B,BI) :- fFix@NI(NI,E,I), 
				lookupResults@NI(NI,K,B,BI,E).

f5 finger@NI(NI,I,B,BI) :- eagerFinger@NI(NI,I,B,BI).

f6 eagerFinger@NI(NI,I,B,BI) :- node@NI(NI,N), 
				eagerFinger@NI(NI,I1,B,BI), 
				I:=I1 + 1, 
				K:=0x1I << I + N, 
				K in (N,B), 
				BI != NI.

f7 delete fFix@NI(NI,E,I1) :- eagerFinger@NI(NI,I,B,BI), 
			   fFix@NI(NI,E,I1),
			   I > 0, 
			   I1 == I - 1.


f8 nextFingerFix@NI(NI,0) :- eagerFinger@NI(NI,I,B,BI), 
			   ((I == 159) || (BI == NI)).

f9 nextFingerFix@NI(NI,I) :- node@NI(NI,N), 
			   eagerFinger@NI(NI,I1,B,BI), 
			   I:=I1 + 1, 
			   K:=0x1I << I + N, 
			   K in (B,N), 
			   NI != BI.


/** Churn Handling */

watch(join).

c1 joinEvent@NI(NI,E) :- join@NI(NI,E).

c2 joinReq@LI(LI,N,NI,E) :- joinEvent@NI(NI,E),
			 node@NI(NI,N), 
			 landmark@NI(NI,LI),
			 LI != "--".

c3 succ@NI(NI,N,NI) :- landmark@NI(NI,LI),
		       joinEvent@NI(NI,E),
		       node@NI(NI,N), 
		       LI == "--".

c4 lookup@LI(LI,N,NI,E) :- joinReq@LI(LI,N,NI,E).

c5 succ@NI(NI,S,SI) :- join@NI(NI,E),
		    lookupResults@NI(NI,K,S,SI,E).

/*
c6 bestSuccCount@NI(NI,E,count<*>) :- stabilize@NI(NI,E),
		                      node@NI(NI,N), 
                                      succ@NI(NI,S,SI),
                                      N != S.

c7 join@NI(NI, E) :- bestSuccCount@NI(NI,E,C), C == 0.
*/

c8 join@NI(NI, E) :- periodic@NI(NI, E, 0, 1).

/** Stabilization */

watch(bestSucc).
watch(succ).
/*
watch(stabilize).
watch(succ).
watch(pred).
watch(stabilizeRequest).
watch(sendPredecessor).
watch(sendSuccessors).
watch(notifyPredecessor).
watch(returnSuccessor).
*/

sb1 stabilize@NI(NI,E) :- periodic@NI(NI,E,15).

sb2 stabilizeRequest@SI(SI,NI) :- stabilize@NI(NI,E),
				bestSucc@NI(NI,S,SI).

sb3 sendPredecessor@PI1(PI1,P,PI) :- stabilizeRequest@NI(NI,PI1),
				pred@NI(NI,P,PI), 
				PI != "--".

sb4 succ@NI(NI,P,PI) :- node@NI(NI,N),
		     	sendPredecessor@NI(NI,P,PI),
			bestSucc@NI(NI,S,SI), 
			P in (N,S).

sb5 sendSuccessors@SI(SI,NI) :- stabilize@NI(NI,E),
			  succ@NI(NI,S,SI).

sb6 returnSuccessor@PI(PI,S,SI) :- sendSuccessors@NI(NI,PI),
				   succ@NI(NI,S,SI).

sb7 succ@NI(NI,S,SI) :- returnSuccessor@NI(NI,S,SI).

sb7 notifyPredecessor@SI(SI,N,NI) :- stabilize@NI(NI,E),
			      node@NI(NI,N), 
			      succ@NI(NI,S,SI).


sb8 pred@NI(NI,P,PI) :- node@NI(NI,N),
			notifyPredecessor@NI(NI,P,PI), 
			pred@NI(NI,P1,PI1),
			((PI1 == "--") || (P1 == N) || (P in (P1,N))).


/** Connectivity Monitoring */
/*
watch(pingEvent).
watch(pingReq).
watch(pingResp).
watch(pingNode).
watch(pingNodeCount).
watch(pendingPing).
*/

cm0 pingEvent@NI(NI,E) :- periodic@NI(NI,E,5).

cm1 pendingPing@NI(NI,PI,E) :- pingEvent@NI(NI,E),
			pingNode@NI(NI,PI).

cm2 pingReq@PI(PI,NI,E) :- pendingPing@NI(NI,PI,E).

cm3 delete pendingPing@NI(NI,PI,E) :- pingResp@NI(NI,PI,E).

cm4 pingResp@RI(RI,NI,E) :- pingReq@NI(NI,RI,E).

cm5 pingNode@NI(NI,SI) :- succ@NI(NI,S,SI), 
		       SI != NI.

cm6 pingNode@NI(NI,PI) :- pred@NI(NI,P,PI), 
		       PI != NI, 
		       PI != "--".

cm7 succ@NI(NI,S,SI) :- succ@NI(NI,S,SI),
		     pingResp@NI(NI,SI,E).

cm8 pred@NI(NI,P,PI) :- pred@NI(NI,P,PI),
		     pingResp@NI(NI,PI,E).

cm9 pred@NI(NI,"--","--") :- pingEvent@NI(NI,E), 
			pendingPing@NI(NI,PI,E), 
			pred@NI(NI,P,PI).

