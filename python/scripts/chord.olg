/**
  * This file is distributed under the terms in the attached LICENSE file.
  * If you do not find this file, copies can be found by writing to:
  * Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300,
  * Berkeley, CA, 94704.  Attention:  Intel License Inquiry.
  * Or
  * UC Berkeley EECS Computer Science Division, 387 Soda Hall #1776, 
  * Berkeley, CA,  94707. Attention: P2 Group.
  * 
  * DESCRIPTION: P2Chord in OverLog
  * 
  * $Id$
  * 
  * Run me as follows:
  * 
  * tests/runOverLog2 -DMASTER=\"<masterHost:myPort\" chord.olg <myhost> <myport>
  **/

/* The base tuples */

materialize(node, infinity, 1, keys(1)).
materialize(finger, infinity, 160, keys(2)).
materialize(bestSucc, infinity, 1, keys(1)).
materialize(succ, infinity, infinity, keys(2)).
materialize(pred, infinity, 1, keys(1)).
materialize(succCount, infinity, 1, keys(1)).
materialize(join, 20, 10, keys(1)).
materialize(landmark, infinity, 1, keys(1)).
materialize(fFix, infinity, 160, keys(2)).  
materialize(nextFingerFix, infinity, 1, keys(1)).
materialize(pingNode, 20, infinity, keys(2)).  
materialize(pendingPing, 20, infinity, keys(2)).  

/* Inherit table from gossip.olg */
materialize(parent, infinity, 1, keys(2)).

/*
watch(landmark).
watch(bestSuccEvent).
watch(fingerEvent).
watch(bestLookupDist).
*/
watch(joinEvent).
watch(lookup).
watch(lookupResults).

watch(finger).
watch(succ).
watch(bestSucc).
watch(joinReq).
watch(bestSuccDist).
watch(succEvent).
watch(currentSucc).


i0 node(@NI, N)          :- periodic(@NI, E, 0, 1), N := f_sha1(NI).
i1 pred(@NI, P, PI)      :- periodic(@NI, E, 0, 1), P := 0x0I, PI:="-".
i2 nextFingerFix(@NI, 0) :- periodic(@NI, E, 0, 1). 
i3 landmark(@NI, MASTER) :- periodic(@NI, E, 0, 1).
i4 landmark(@NI, PI)     :- periodic(@NI, E, 1, 1), parent(@NI, PI), f_coinFlip(0.5) == 1.

/** Lookups */

l2 bestLookupDist(@NI,K,R,E,min<D>) :- node(@NI,N), 
				  	 lookup(@NI,K,R,E), 
					 D := K - B - 1, 
					 finger(@NI,I,B,BI), 
					 B in (N,K).

l3 lookup(min<@BI>, K, R, E) :- node(@NI,N),	    
			        bestLookupDist(@NI,K,R,E,D), 
			        finger(@NI,I,B,BI), 
			        D == K - B - 1,
			        B in (N, K).

l1 lookupResults(@R,K,S,SI,E) :-
	node(@NI,N),
	lookup(@NI,K,R,E), 
	bestSucc(@NI,S,SI),
	(K in (N,S] || (N == S)).



/** Neighbor Selection */

n0 bestSuccEvent(@MI, T, NI, SI) :-
	bestSucc(@NI,S,SI), 
	MI:=MASTER, T:="S".

n0a bestSuccEvent(@MI, T, NI, SI) :-
	bestSucc(@NI, S, SI), 
	MI:=MASTER, T:="S",
	visUpdate(@NI).

n5 fingerEvent(@MI, T, I, NI, BI) :-
	finger(@NI, I, B, BI), 
	MI := MASTER,
	T := "F",
	I > 0.

n1 succEvent(@NI) :- periodic(@NI,E,5).

n2 bestSuccDist(@NI,min<D>) :- succEvent(@NI),
  			         node(@NI,N),
			         succ(@NI,S,SI), 
			         D := S - N - 1.

n3 bestSucc(@NI,S,SI) :- succ(@NI,S,SI),
			   bestSuccDist(@NI,D), 
			   node(@NI,N),
			   D == S - N - 1.

n4 finger(@NI,0,S,SI) :- bestSucc(@NI,S,SI).



/** Successor eviction */

s1 succCount(@NI,count<*>) :- succ(@NI,S,SI), NI != SI.

s2 evictSucc(@NI) :- succCount(@NI,C), C > 3.

s3 maxSuccDist(@NI,max<D>) :- succ(@NI,S,SI),
				node(@NI,N), 
				evictSucc(@NI),
				D := S - N - 1.

s4 delete succ(@NI,S,SI) :- node(@NI,N), 
			      succ(@NI,S,SI),
			      maxSuccDist(@NI,D), 
			      D == S - N - 1.

/** Finger fixing */

f1 fFixEvent(@NI,E,I) :- periodic(@NI,E,20), nextFingerFix(@NI,I).

f2 fFix(@NI,E,I) :- fFixEvent(@NI,E,I).

f3 lookup(@NI,K,NI,E) :- fFixEvent(@NI,E,I),
			      node(@NI,N), 
			      K:=0x1I << I + N.

f4 eagerFinger(@NI,I,B,BI) :- fFix(@NI,E,I), 
				lookupResults(@NI,K,B,BI,E).

f5 finger(@NI,I,B,BI) :- eagerFinger(@NI,I,B,BI).

f6 eagerFinger(@NI,I,B,BI) :- node(@NI,N), 
				eagerFinger(@NI,I1,B,BI), 
				I:=I1 + 1, 
				K:=0x1I << I + N, 
				K in (N,B), 
				BI != NI.

f7 delete fFix(@NI,E,I1) :- eagerFinger(@NI,I,B,BI), 
  			      fFix(@NI,E,I1),
			      I > 0, I1 == I - 1.


/*
f8 nextFingerFix(@NI,0) :- eagerFinger(@NI,I,B,BI), 
			     ((I == 159) || (BI == NI)).
*/

f9 nextFingerFix(@NI,I) :- node(@NI,N), 
			     eagerFinger(@NI,I1,B,BI), 
			     I:=(I1 + 1)%160, 
			     K:=0x1I << I + N, 
			     K in (B,N), 
			     NI != BI.


/* Chord Join */
j1 join(@NI, E) :- periodic(@NI, E, 5, 1).

j2 joinEvent(@NI,E) :- join(@NI,E).

j3 joinReq(@LI,N,NI,E) :- joinEvent(@NI,E),
			  node(@NI,N), 
			  landmark(@NI,LI),
			  LI != NI.

j4 succ(@NI,N,NI) :- landmark(@NI,LI),
		     joinEvent(@NI,E),
		     node(@NI,N), 
		     NI == LI.

j5 lookup(@LI,N,NI,E) :- joinReq(@LI,N,NI,E).

j6 succ(@NI,S,SI) :- join(@NI,E),
		     lookupResults(@NI,K,S,SI,E).


/** Attempt to rejoin if I have no successors */
j6 join(@NI, E) :- periodic(@NI, E, 30), succCount(@NI,C), C == 0.




/** Stabilization */

sb1 stabilize(@NI,E) :- periodic(@NI, E, 10).

sb2 stabilizeRequest(@SI,NI) :- stabilize(@NI,E), bestSucc(@NI,S,SI).

sb3 sendPredecessor(@PI1,P,PI) :- stabilizeRequest(@NI,PI1),
				     pred(@NI,P,PI), PI != "-".

sb4 succ(@NI,P,PI) :- node(@NI,N),
		      sendPredecessor(@NI,P,PI),
		      bestSucc(@NI,S,SI), 
		      P in (N,S).

sb5 sendSuccessors(@SI,NI) :- stabilize(@NI,E), succ(@NI,S,SI).

sb6 returnSuccessor(@PI,S,SI) :- sendSuccessors(@NI,PI), 
                                 succ(@NI,S,SI).

sb7 succ(@NI,S,SI) :- returnSuccessor(@NI,S,SI).

sb7 notifyPredecessor(@SI,N,NI) :- stabilize(@NI,E),
			           node(@NI,N), 
			           succ(@NI,S,SI).


sb8 pred(@NI,P,PI) :- node(@NI,N),
                      notifyPredecessor(@NI,P,PI), 
                      pred(@NI,P1,PI1),
                      ((PI1 == "-") || (P1 == N) || (P in (P1,N))).


sb10 currentSucc(@NI, E, SI) :-
	stabilize(@NI, E), succ(@NI, S, SI).


/** Connectivity Monitoring */
/*
watch(pingEvent).
watch(pingReq).
watch(pingResp).
watch(pingNode).
watch(pingNodeCount).
watch(pendingPing).
cm0 pingEvent(@NI,E) :- periodic(@NI,E,10).

cm1 pendingPing(@NI,PI,E) :- pingEvent(@NI,E),
			pingNode(@NI,PI).

cm2 pingReq(@PI,NI,E) :- pendingPing(@NI,PI,E).

cm3 delete pendingPing(@NI,PI,E) :- pingResp(@NI,PI,E).

cm4 pingResp(@RI,NI,E) :- pingReq(@NI,RI,E).

cm5 pingNode(@NI,SI) :- succ(@NI,S,SI), 
		       SI != NI.

cm6 pingNode(@NI,PI) :- pred(@NI,P,PI), 
		       PI != NI, 
		       PI != "-".

cm7 succ(@NI,S,SI) :- succ(@NI,S,SI),
		     pingResp(@NI,SI,E).

cm8 pred(@NI,P,PI) :- pred(@NI,P,PI),
		     pingResp(@NI,PI,E).

cm9 pred(@NI,"-","-") :- pingEvent(@NI,E), 
			pendingPing(@NI,PI,E), 
			pred(@NI,P,PI).

*/
