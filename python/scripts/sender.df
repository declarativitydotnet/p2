macro Conn(name, port) {
  let cct = CCT("transmit_cc", 1, 20);
  let retry = RDelivery("retry");
  let retryMux = Mux("retry_mux", 2);
  let udp = Udp2("udp", port);

  input retry; 

  retry -> cct ->
  PelTransform("package", "$0 swallow swap pop pop") ->
  # Print("packaged_tuple") ->
  MarshalField("marshal", 1) -> 
  StrToSockaddr("addr_conv", 0) -> udp;

  udp -> UnmarshalField("unmarshal", 1) ->
  PelTransform("unRoute", "$1 unboxPop") ->
  [1]cct[1] -> [1]retry[1] -> retryMux -> Discard("discard");

  retry[2] -> [1]retryMux;
}

macro RateConn(name, port) {
  let rcct = RateCCT("transmit_rcc");
  let retry = RDelivery("retry");
  let retryMux = Mux("retry_mux", 2);
  let udp = Udp2("udp", port);

  input retry; 

  retry -> rcct ->
  PelTransform("package", "$0 swallow swap pop pop") ->
  # Print("packaged_tuple") ->
  MarshalField("marshal", 1) -> 
  StrToSockaddr("addr_conv", 0) -> udp;

  udp -> UnmarshalField("unmarshal", 1) ->
  PelTransform("unRoute", "$1 unboxPop") ->
  [1]rcct[1] -> [1]retry[1] -> retryMux -> Discard("discard");

  retry[2] -> [1]retryMux;
}


dataflow Send1 {
  let q = Queue();
  let n = call q.element( ).class_name( );

  TimedPushSource("source", 1)                                           -> 
  PelTransform("source_address", "'localhost:10001' pop swallow unboxPop") ->
  PelTransform("destAddr", "'localhost:10000' pop swallow unboxPop")       ->
  q -> Sequence("sequence", 1, 2) -> 
  Print("print_send") ->
  RateConn("conn", 10001);
}

dataflow Send2 {
  TimedPushSource("source", 1)                                             -> 
  PelTransform("source_address", "'localhost:10002' pop swallow unboxPop") ->
  PelTransform("destAddr", "'localhost:10000' pop swallow unboxPop")       ->
  Queue -> Sequence("sequence", 1, 2) -> 
  Print("print_send") ->
  RateConn("conn", 10002);
}

.
