macro UdpCC(ip, port) {
  let q   := Queue("Source Data Q", size);
  let udp := Udp("Test Udp", port);
  let cct := CCT("Congestion Control Transmit", 1, 2048);
  let ccr := CCR("Congestion Control Receive", 2048);

  input q; output ccr;

  q[0] -> Route(ip) -> Sequence("Sequence", 1) ->
  cct -> MarshalField("marshal data", 1) -> udp;

  udp -> UnmarshalField("Unpack", 1) -> ccr;
}

macro TCP(ip, port) {
  let q     := Queue("Source Data Q", size);
  let udp   := Udp("Test Udp", port);
  let cct   := CCT("Congestion Control Transmit", 1, 2048);
  let ccr   := CCR("Congestion Control Receive", 2048);
  let order := Order("Ordered delivery");

  input q; output order;

  q[0] -> RDelivery("Reliable Delivery") -> UdpCC(ip, port);

  udp -> UnmarshalField("Unpack", 1) -> ccr -> order;
}

dataflow Foobar {
  let a     := TimedPushSource("Data Generator", .01);
  let b     := TimedPushSource("Data Generator", .01);
  let tcp   := TCP(129.0.0.1, 80);

  add ["foobar"]Main.ddemux;

  a -> ["foobar"]Main.demux;
  a[0] -> Foobar.demux -> UdpCC(129.0.0.1, 10000) -> Queue("Q", 1);
  b[0] -> tcp -> Queue("Q", 1);
}
.
