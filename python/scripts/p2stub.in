#!@PYTHON@
import dfparser
import libp2python
import sys;
import os;
import getopt;

def print_usage():
    print
    print "Usage: p2stub.py [-s seed] [-n <nodes>=1]  <address> <port> [landmark_address]\n"
    print

def parse_cmdline(argv):
    shortopts = "dn:s:"
    flags = {"debug" : False, "nodes" : 1}
    opts, args = getopt.getopt(argv[1:], shortopts)
    for o, v in opts:
        if   o == "-d": flags["debug"] = True
        elif o == "-n": flags["nodes"] = int(v)
        elif o == "-s": libp2python.srand(int(v))
        else:
            print_usage()
            exit(3)
    return flags, args

def get_stub(name, address, port):
  stub = """ 
    dataflow %s {
      let udp = Udp2("udp", %s);
      let wrapAroundDemux = Demux("wrapAroundSendDemux", {Val_Str("%s:%s")}, 0);
      let wrapAroundMux = Mux("wrapAroundSendMux", 2);

      udp-> UnmarshalField("unmarshal", 1)      -> 
      PelTransform("unRoute", "$1 unboxPop")    ->
      Defrag("defragment", 1)                   -> 
      TimedPullPush("demux_in_pullPush", 0)     -> 
      PelTransform("unPackage", "$2 unboxPop")  ->
      wrapAroundMux ->
      PrintWatch("PrintWatchReceiveBeforeDemux", {"lookup", "lookupResults"}) ->
      DDemux("dDemux", {value}, 0) -> 
      Queue("install_result_queue") ->
      DRoundRobin("dRoundRobin", 1) ->  
      TimedPullPush("rr_out_pullPush", 0) -> 
      wrapAroundDemux -> 
      UnboxField("unboxWrapAround", 1) -> 
      [1]wrapAroundMux;

      wrapAroundDemux[1] -> 
      PrintWatch("PrintWatchTransportOut", {"lookup", "lookupResults"}) ->
      Sequence("terminal_sequence", 1, 1)          ->
      Frag("fragment", 1)                          ->
      PelTransform("package", "$0 pop swallow pop") ->
      MarshalField("marshalField", 1)              ->
      StrToSockaddr("addr_conv", 0)                ->
      udp; 

    }
    .	# END OF DATAFLOW DEFINITION
  """ % (name, port, address, port)
  return stub

def gen_stub(plumber, name, address, port):
    stub  = get_stub(name, address, port)

    dfparser.compile(plumber, stub)

    if dfparser.dataflows.has_key(name):
      m = dfparser.dataflows[name]
      m.eval_dataflow()
      return m.conf

if __name__ == "__main__":
  libp2python.srand(libp2python.time())
  try:
    flags, args = parse_cmdline(sys.argv)
  except:
    print "EXCEPTION"
    print_usage()
    sys.exit(1)
  if len(args) < 2:
    print_usage()
    sys.exit(1)

  libp2python.eventLoopInitialize()

  address  = args[0]
  port     = int(args[1])
  landmark = "-"
  if len(args) >= 3: landmark = args[2]

  plumber = libp2python.Plumber()

  for i in range(flags["nodes"]):
      name = "Dataflow_" + str(i)
      stub = gen_stub(plumber, name, address, port+i)

      print "INSTALL DATAFLOW: ", name
      if plumber.install(stub) == 0:
          print "Stub Correctly initialized.\n"
      else:
          print "** Stub Failed to initialize correct spec\n"
          sys.exit(1)

      edit   = plumber.new_dataflow_edit(name)
      ddemux = edit.find("dDemux")
      rqueue = edit.find("install_result_queue")

      oc = edit.addElement(libp2python.OverlogCompiler("ocompiler", plumber, 
                                                       address+":"+str(port+i), name)) 
      di = edit.addElement(libp2python.DataflowInstaller("dinstaller", plumber, dfparser, 
                                                         address+":"+str(port+i), landmark))
      # printer = edit.addElement(libp2python.Print("dataflow_printer"));
      edit.hookUp(ddemux, 0, oc, 0)
      edit.hookUp(oc, 0, di, 0)
      edit.hookUp(di, 0, rqueue, 0)

      print "INSTALL THE EDIT"
      if plumber.install(edit) == 0:
          print "Edit Correctly initialized.\n"
      else:
          print "** Edit Failed to initialize correct spec\n"

      plumber.toDot("p2stub_%s.dot" % name)
      os.system("dot -Tps p2stub_%s.dot -o p2stub_%s.ps" % (name, name))
      os.remove("p2stub_%s.dot" % name)

  # Run the plumber
  libp2python.eventLoop()
