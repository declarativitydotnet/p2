P2 PYTHON EXTENSION:

This directory and its subdirectories contain the extension modules for 
importing P2 elements and value types into Python. All extensions are
written using the Boost.Python library wrappers. The main Python module
is defined in 'p2python.cpp', which is located in the current directory.
The p2python.cpp file defines the actual python module name (libp2python) that
is used when importing the library into Python. The steps to importing
the libp2python module are as follows:

1. Do a make in the 'python/ directory. This will compile everything 
   under 'python/p2' and creates a shared library at 
   'python/p2/.libs/libp2python.so'.
2. Define your 'PYTHONPATH' variable to include the 'python/p2/.libs' directory.
   e.g., `export PYTHONPATH=/home/tcondie/phi/phi/python/p2/.libs`
   This environment variable tells python where to look for libraries that you
   wish to import.
3. Import 'libp2python' in your python script. 
   Here is an example session:


ADDING NEW P2 ELEMENTS TO PYTHON:

The first thing one should do is read the Boost.Python tutorial, which can be
found at http://www.boost.org/libs/python/doc/tutorial/doc/html/index.html

After reading through this tutorial and looking at preexisting extensions, it
should be clear how to include your new element in libp2python. 

EXAMPLES:

We have included an example python script ('python/scripts/netcc.py') that uses 
the P2 python library to create a network sender and reciever dataflow. Simply
execute this script ('python netcc.py') to look at the arguements that it expects.
The script is a python replica of the netcc.C test found in the 'tests/' directory.
It will show you how to create a Plumber class and a Dataflow class. From there
you can create various elements and hook them together using the same Dataflow 
class methods. Here is an example run:

For the interested party we have began to build a new dataflow language (found in
'python/dfparser'). The python script 'python/scripts/dfrun.py' will read in a
file containing a description of the dataflow that should be created. Example 
dataflow descriptions can also be found in the 'python/scripts' directory, and have
been given the '.df' file extension. Here is an example run:
