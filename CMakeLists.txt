Project(P2)

IF(WIN32)
SUBDIRS(getopt p2core elements stages net overlog planner debugger unitTests tests python)
ELSE(WIN32)
SUBDIRS(p2core elements stages net overlog planner debugger unitTests tests python)
ENDIF(WIN32)

# Main decisions
# SET(BUILD_SHARED_LIBS ON)
# SET(CMAKE_VERBOSE_MAKEFILE ON)


# uncomment the following line to get CMake variables to print to screen
# INCLUDE(CMakePrintSystemInformation)


# find our custom CMake modules
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${P2_SOURCE_DIR}/cmake)

# Look for main packages we need
FIND_PACKAGE(Boost)
FIND_PACKAGE(OpenSSL)
INCLUDE(FindPythonLibs)
## FindFLEX from http://www.cmake.org/Bug/bug.php?op=show&bugid=4018&pos=4
FIND_PACKAGE(FLEX)
FIND_PACKAGE(BISON)

#IF(WIN32)
#FIND_PATH(FLEX_LEXER_H_PATH FlexLexer.h "C:/Documents and Settings/Administrator/Desktop/UnxUtils/usr/local/include")
#ENDIF(WIN32)

#IF(WIN32)
#FIND_LIBRARY(BOOST_TEST_LIB boost_unit_test_framework.lib "C:/Program Files/boost/boost_1_34_0/lib")
#ENDIF(WIN32)

# Look for include files
INCLUDE (CheckIncludeFiles)
# usage: CHECK_INCLUDE_FILES (<header> <RESULT_VARIABLE> )
# CHECK_INCLUDE_FILES (unistd.h HAS_UNISTD)
# 
# #IF(NOT HASUNISTD)
# #FILE(WRITE p2core/unistd.h "/* this blank file generated by cmake to make Flex output compile */")
# #ENDIF(NOT HASUNISTD)

# Check for unusual functions
INCLUDE(CheckSymbolExists)

CHECK_SYMBOL_EXISTS(drand48 "stdlib.h" HAVE_DRAND48)
CHECK_SYMBOL_EXISTS(random "stdlib.h" HAVE_RANDOM)

# Check for exp10, which is a g++ special.  CHECK_SYMBOL_EXISTS fires off gcc, not g++, so we
# write a custom check.
INCLUDE(CheckCXXSourceCompiles)
CHECK_CXX_SOURCE_COMPILES("#include <math.h> 
main(){double i = exp10(2.0);}" HAVE_EXP10)

# Output the config.h file
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)

# Avoid linker warnings on Darwin related to circular dependencies among shared libs.
IF(${CMAKE_SYSTEM} MATCHES Darwin)
	SET(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS}  -flat_namespace -undefined suppress")
	SET(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS}  -flat_namespace -undefined suppress")
ENDIF(${CMAKE_SYSTEM} MATCHES Darwin)

# add random environment variable definitions
# deal with Boost time shtuff: we want nanoseconds!
ADD_DEFINITIONS(-DBOOST_DATE_TIME_POSIX_TIME_STD_CONFIG)
# This makes visual studio happy with Boost (see
# http://opensource.adobe.com/asl_readme.html#Issues_Surrounding_MSVC_8.0.27s_.22Safe.22_Libraries)
ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)

# This includes rand_s under windows
ADD_DEFINITIONS(-D_CRT_RAND_S)

IF (WIN32)
# This ensures that windows.h doesn't include winsock.h (we're using winsock2.h)
ADD_DEFINITIONS(-DWIN32_LEAN_AND_MEAN)

# This turns on the VLD memory leak detector for Windows (http://dmoulding.googlepages.com/vld)
ADD_DEFINITIONS(-DVISUAL_LEAK_DETECTOR)
ENDIF (WIN32)

# ADD_DEFINITIONS(-DBOOST_LIB_DIAGNOSTIC)
# ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)
# ADD_DEFINITIONS(-DBOOST_TEST_NO_LIB)

IF(WIN32)
  SET(PLATFORM_INCLUDE_DIR ${P2_BINARY_DIR}/getopt)
  SET(PLATFORM_LIB_DIR ${P2_BINARY_DIR}/getopt)
  SET(PLATFORMLIBS getopt ws2_32)
  # boost libs are auto-detected on Win32 to deal with weird suffixes
ELSE(WIN32)
  SET(BOOSTLIBS boost_regex boost_date_time boost_unit_test_framework boost_serialization)
ENDIF(WIN32)

# set include path for this and all subdirs
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}
					${PLATFORM_INCLUDE_DIR} 
                    ${CMAKE_CURRENT_SOURCE_DIR}/overlog	
                    ${CMAKE_CURRENT_BINARY_DIR}/overlog	
                    ${CMAKE_CURRENT_SOURCE_DIR}/p2core 
                    ${CMAKE_CURRENT_BINARY_DIR}/p2core 
#		            ${CMAKE_CURRENT_SOURCE_DIR}/eventLoop 
                    ${CMAKE_CURRENT_SOURCE_DIR}/elements
                    ${CMAKE_CURRENT_SOURCE_DIR}/stages
                    ${CMAKE_CURRENT_SOURCE_DIR}/net
                    ${CMAKE_CURRENT_SOURCE_DIR}/overlog
                    ${CMAKE_CURRENT_SOURCE_DIR}/planner
                    ${CMAKE_CURRENT_SOURCE_DIR}/debugger
		            ${Boost_INCLUDE_DIRS} 
		            ${PYTHON_INCLUDE_PATH}
		            ${FLEX_LEXER_H_PATH} 
		            ${OPENSSL_INCLUDE_DIR}
		            /usr/include
		    )

# set linker path for this and all subdirs
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS} 
		${PLATFORM_LIB_DIR}
		${P2_BINARY_DIR}/overlog 
		${P2_BINARY_DIR}/net 
		${P2_BINARY_DIR}/stages 
		${P2_BINARY_DIR}/elements 
		${P2_BINARY_DIR}/debugger 
		${P2_BINARY_DIR}/p2core  
#		${P2_BINARY_DIR}/eventLoop 
		${P2_BINARY_DIR}/planner
		${P2_BINARY_DIR})

SET(COMMON_LIBRARIES ${CRYPTO_LIBRARIES}
					 ${SSL_LIBRARIES}
					 ${PLATFORMLIBS}
					 ${BOOSTLIBS}
					 p2core
					 p2net
					 p2stages
					 p2elements
					 p2debugger
					 p2overlog
					 p2planner 
	   				 )
