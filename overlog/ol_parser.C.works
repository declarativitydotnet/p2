/* A Bison parser, made by GNU Bison 1.875c.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* If NAME_PREFIX is specified substitute the variables and functions
   names.  */
#define yyparse ol_parser_parse
#define yylex   ol_parser_lex
#define yyerror ol_parser_error
#define yylval  ol_parser_lval
#define yychar  ol_parser_char
#define yydebug ol_parser_debug
#define yynerrs ol_parser_nerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     OL_OR = 258,
     OL_AND = 259,
     OL_BITOR = 260,
     OL_BITXOR = 261,
     OL_BITAND = 262,
     OL_NEQ = 263,
     OL_EQ = 264,
     OL_LTE = 265,
     OL_LT = 266,
     OL_GTE = 267,
     OL_GT = 268,
     OL_NOTREGIEXP = 269,
     OL_NOTREGEXP = 270,
     OL_REGIEXP = 271,
     OL_REGEXP = 272,
     OL_RSHIFT = 273,
     OL_LSHIFT = 274,
     OL_MINUS = 275,
     OL_PLUS = 276,
     OL_MODULUS = 277,
     OL_DIVIDE = 278,
     OL_TIMES = 279,
     OL_EXP = 280,
     OL_NOT = 281,
     OL_IN = 282,
     OL_ID = 283,
     OL_ASSIGN = 284,
     OL_AT = 285,
     OL_NAME = 286,
     OL_MAX = 287,
     OL_MIN = 288,
     OL_COUNT = 289,
     OL_COMMA = 290,
     OL_DONTCARE = 291,
     OL_DOT = 292,
     OL_EOF = 293,
     OL_IF = 294,
     OL_STRING = 295,
     OL_VALUE = 296,
     OL_VAR = 297,
     OL_FUNCTION = 298,
     OL_NULL = 299,
     OL_LPAR = 300,
     OL_RPAR = 301,
     OL_LSQUB = 302,
     OL_RSQUB = 303,
     OL_PERIOD = 304,
     OL_DEL = 305,
     OL_QUERY = 306,
     OL_RANGE = 307,
     OL_NOW = 308,
     OL_LOCAL = 309,
     OL_MATERIALIZE = 310,
     OL_KEYS = 311,
     OL_WATCH = 312,
     OL_RANGEOO = 313,
     OL_RANGEOC = 314,
     OL_RANGECO = 315,
     OL_RANGECC = 316
   };
#endif
#define OL_OR 258
#define OL_AND 259
#define OL_BITOR 260
#define OL_BITXOR 261
#define OL_BITAND 262
#define OL_NEQ 263
#define OL_EQ 264
#define OL_LTE 265
#define OL_LT 266
#define OL_GTE 267
#define OL_GT 268
#define OL_NOTREGIEXP 269
#define OL_NOTREGEXP 270
#define OL_REGIEXP 271
#define OL_REGEXP 272
#define OL_RSHIFT 273
#define OL_LSHIFT 274
#define OL_MINUS 275
#define OL_PLUS 276
#define OL_MODULUS 277
#define OL_DIVIDE 278
#define OL_TIMES 279
#define OL_EXP 280
#define OL_NOT 281
#define OL_IN 282
#define OL_ID 283
#define OL_ASSIGN 284
#define OL_AT 285
#define OL_NAME 286
#define OL_MAX 287
#define OL_MIN 288
#define OL_COUNT 289
#define OL_COMMA 290
#define OL_DONTCARE 291
#define OL_DOT 292
#define OL_EOF 293
#define OL_IF 294
#define OL_STRING 295
#define OL_VALUE 296
#define OL_VAR 297
#define OL_FUNCTION 298
#define OL_NULL 299
#define OL_LPAR 300
#define OL_RPAR 301
#define OL_LSQUB 302
#define OL_RSQUB 303
#define OL_PERIOD 304
#define OL_DEL 305
#define OL_QUERY 306
#define OL_RANGE 307
#define OL_NOW 308
#define OL_LOCAL 309
#define OL_MATERIALIZE 310
#define OL_KEYS 311
#define OL_WATCH 312
#define OL_RANGEOO 313
#define OL_RANGEOC 314
#define OL_RANGECO 315
#define OL_RANGECC 316




/* Copy the first part of user declarations.  */
#line 1 "ol_parser.y"

/*
 * @(#)$Id$
 *
 * Copyright (c) 2005 Intel Corporation. All rights reserved.
 *
 * This file is distributed under the terms in the attached INTEL-LICENSE file.
 * If you do not find these files, copies can be found by writing to:
 * Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300,
 * Berkeley, CA, 94704.  Attention:  Intel License Inquiry.
 * 
 * DESCRIPTION: Bison grammar for OverLog (the P2 dialect of datalog)
 *
 */

  // Prolog[ue]
  #include <deque>
  #include <iostream>
  #include "val_str.h"
  #include "ol_context.h"

  union YYSTYPE;
  static int ol_parser_lex (YYSTYPE *lvalp, OL_Context *ctxt);
  static void ol_parser_error (OL_Context *ctxt, str msg);



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 88 "ol_parser.y"
typedef union YYSTYPE {
  Parse_Bool::Operator  u_boper;
  Parse_Math::Operator  u_moper;
  Parse_Agg::Operator   u_aoper;
  Parse_TermList	*u_termlist;
  Parse_Term		*u_term;
  Parse_FunctorName	*u_functorname;
  Parse_ExprList	*u_exprlist;
  Parse_Expr		*v;
  Parse_AggTerm         *u_aggterm;
} YYSTYPE;
/* Line 191 of yacc.c.  */
#line 246 "ol_parser.tab.c"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 214 of yacc.c.  */
#line 258 "ol_parser.tab.c"

#if ! defined (yyoverflow) || YYERROR_VERBOSE

# ifndef YYFREE
#  define YYFREE free
# endif
# ifndef YYMALLOC
#  define YYMALLOC malloc
# endif

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   define YYSTACK_ALLOC alloca
#  endif
# else
#  if defined (alloca) || defined (_ALLOCA_H)
#   define YYSTACK_ALLOC alloca
#  else
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined (__GNUC__) && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  25
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   377

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  62
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  37
/* YYNRULES -- Number of rules. */
#define YYNRULES  102
/* YYNRULES -- Number of states. */
#define YYNSTATES  202

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   316

#define YYTRANSLATE(YYX) 						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short yyprhs[] =
{
       0,     0,     3,     5,     8,    10,    13,    15,    17,    19,
      21,    23,    26,    36,    48,    50,    52,    57,    59,    63,
      69,    75,    82,    87,    93,    99,   104,   109,   111,   115,
     117,   119,   121,   123,   132,   135,   144,   146,   150,   153,
     157,   159,   163,   165,   167,   172,   176,   178,   182,   184,
     186,   188,   192,   196,   200,   204,   208,   212,   217,   220,
     224,   228,   232,   237,   239,   241,   243,   245,   247,   249,
     251,   253,   255,   259,   264,   268,   273,   275,   278,   280,
     284,   286,   288,   290,   292,   294,   296,   298,   304,   310,
     316,   322,   324,   326,   328,   330,   332,   334,   336,   341,
     346,   348,   350
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const yysigned_char yyrhs[] =
{
      63,     0,    -1,    38,    -1,    64,    38,    -1,    65,    -1,
      65,    64,    -1,    72,    -1,    66,    -1,    67,    -1,    71,
      -1,    73,    -1,    77,    37,    -1,    55,    45,    31,    35,
      68,    35,    68,    46,    37,    -1,    55,    45,    31,    35,
      68,    35,    68,    35,    69,    46,    37,    -1,    91,    -1,
      41,    -1,    56,    45,    70,    46,    -1,    41,    -1,    41,
      35,    70,    -1,    57,    45,    31,    46,    37,    -1,    42,
      77,    39,    74,    37,    -1,    42,    50,    77,    39,    74,
      37,    -1,    77,    39,    74,    37,    -1,    50,    77,    39,
      74,    37,    -1,    42,    77,    39,    78,    37,    -1,    77,
      39,    78,    37,    -1,    51,    79,    80,    37,    -1,    75,
      -1,    75,    35,    74,    -1,    76,    -1,    77,    -1,    87,
      -1,    86,    -1,    52,    45,    42,    35,    95,    35,    95,
      46,    -1,    79,    80,    -1,    98,    45,    80,    35,    80,
      35,    77,    46,    -1,    31,    -1,    31,    30,    42,    -1,
      45,    46,    -1,    45,    81,    46,    -1,    82,    -1,    82,
      35,    81,    -1,    96,    -1,    97,    -1,    43,    45,    84,
      46,    -1,    43,    45,    46,    -1,    85,    -1,    85,    35,
      84,    -1,    91,    -1,    96,    -1,    88,    -1,    42,    29,
      91,    -1,    42,    29,    88,    -1,    42,    29,    96,    -1,
      42,    29,    83,    -1,    45,    88,    46,    -1,    42,    27,
      94,    -1,    42,    27,    28,    94,    -1,    26,    88,    -1,
      88,     3,    88,    -1,    88,     4,    88,    -1,    89,    90,
      89,    -1,    89,    90,    28,    89,    -1,    91,    -1,    83,
      -1,    96,    -1,     9,    -1,     8,    -1,    13,    -1,    11,
      -1,    12,    -1,    10,    -1,    91,    93,    92,    -1,    91,
      93,    28,    92,    -1,    92,    93,    92,    -1,    92,    93,
      28,    92,    -1,    96,    -1,    20,    96,    -1,    83,    -1,
      45,    91,    46,    -1,    19,    -1,    18,    -1,    21,    -1,
      20,    -1,    24,    -1,    23,    -1,    22,    -1,    45,    95,
      35,    95,    46,    -1,    45,    95,    35,    95,    48,    -1,
      47,    95,    35,    95,    46,    -1,    47,    95,    35,    95,
      48,    -1,    91,    -1,    96,    -1,    41,    -1,    42,    -1,
      40,    -1,    44,    -1,    53,    -1,    98,    11,    42,    13,
      -1,    98,    11,    24,    13,    -1,    33,    -1,    32,    -1,
      34,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short yyrline[] =
{
       0,   111,   111,   112,   115,   116,   119,   120,   121,   122,
     123,   126,   129,   133,   138,   140,   144,   149,   151,   154,
     159,   161,   163,   165,   167,   170,   175,   179,   180,   183,
     183,   183,   183,   186,   190,   194,   198,   200,   204,   206,
     209,   212,   217,   219,   224,   226,   230,   233,   238,   240,
     244,   248,   250,   252,   254,   258,   260,   262,   264,   266,
     268,   270,   272,   276,   278,   280,   284,   285,   286,   287,
     288,   289,   292,   294,   296,   298,   302,   304,   306,   308,
     312,   313,   314,   315,   316,   317,   318,   322,   324,   326,
     328,   332,   334,   339,   339,   339,   339,   341,   345,   348,
     352,   353,   354
};
#endif

#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "OL_OR", "OL_AND", "OL_BITOR",
  "OL_BITXOR", "OL_BITAND", "OL_NEQ", "OL_EQ", "OL_LTE", "OL_LT", "OL_GTE",
  "OL_GT", "OL_NOTREGIEXP", "OL_NOTREGEXP", "OL_REGIEXP", "OL_REGEXP",
  "OL_RSHIFT", "OL_LSHIFT", "OL_MINUS", "OL_PLUS", "OL_MODULUS",
  "OL_DIVIDE", "OL_TIMES", "OL_EXP", "OL_NOT", "OL_IN", "OL_ID",
  "OL_ASSIGN", "OL_AT", "OL_NAME", "OL_MAX", "OL_MIN", "OL_COUNT",
  "OL_COMMA", "OL_DONTCARE", "OL_DOT", "OL_EOF", "OL_IF", "OL_STRING",
  "OL_VALUE", "OL_VAR", "OL_FUNCTION", "OL_NULL", "OL_LPAR", "OL_RPAR",
  "OL_LSQUB", "OL_RSQUB", "OL_PERIOD", "OL_DEL", "OL_QUERY", "OL_RANGE",
  "OL_NOW", "OL_LOCAL", "OL_MATERIALIZE", "OL_KEYS", "OL_WATCH",
  "OL_RANGEOO", "OL_RANGEOC", "OL_RANGECO", "OL_RANGECC", "$accept",
  "program", "clauselist", "clause", "fact", "materialize", "tablearg",
  "primarykeys", "keylist", "watch", "rule", "query", "termlist", "term",
  "range_function", "functor", "aggview", "functorname", "functorbody",
  "functorargs", "functorarg", "function", "functionargs", "functionarg",
  "select", "assign", "bool_expr", "rel_atom", "rel_oper", "math_expr",
  "math_atom", "math_oper", "range_expr", "range_atom", "atom",
  "aggregate", "agg_oper", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned char yyr1[] =
{
       0,    62,    63,    63,    64,    64,    65,    65,    65,    65,
      65,    66,    67,    67,    68,    68,    69,    70,    70,    71,
      72,    72,    72,    72,    72,    72,    73,    74,    74,    75,
      75,    75,    75,    76,    77,    78,    79,    79,    80,    80,
      81,    81,    82,    82,    83,    83,    84,    84,    85,    85,
      86,    87,    87,    87,    87,    88,    88,    88,    88,    88,
      88,    88,    88,    89,    89,    89,    90,    90,    90,    90,
      90,    90,    91,    91,    91,    91,    92,    92,    92,    92,
      93,    93,    93,    93,    93,    93,    93,    94,    94,    94,
      94,    95,    95,    96,    96,    96,    96,    96,    97,    97,
      98,    98,    98
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     1,     2,     1,     2,     1,     1,     1,     1,
       1,     2,     9,    11,     1,     1,     4,     1,     3,     5,
       5,     6,     4,     5,     5,     4,     4,     1,     3,     1,
       1,     1,     1,     8,     2,     8,     1,     3,     2,     3,
       1,     3,     1,     1,     4,     3,     1,     3,     1,     1,
       1,     3,     3,     3,     3,     3,     3,     4,     2,     3,
       3,     3,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     4,     3,     4,     1,     2,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     5,     5,     5,
       5,     1,     1,     1,     1,     1,     1,     1,     4,     4,
       1,     1,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned char yydefact[] =
{
       0,    36,     2,     0,     0,     0,     0,     0,     0,     0,
       4,     7,     8,     9,     6,    10,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     1,     3,     5,    11,     0,
       0,    34,    37,     0,     0,     0,     0,     0,     0,     0,
       0,   101,   100,   102,    95,    93,    94,     0,    96,     0,
       0,    97,     0,    27,    29,    30,     0,    64,    32,    31,
      50,     0,    63,     0,    65,     0,    94,    38,     0,    40,
      42,    43,     0,     0,     0,     0,     0,    26,     0,     0,
      77,    94,    58,     0,     0,     0,     0,    63,     0,    22,
       0,    25,     0,     0,    67,    66,    71,    69,    70,    68,
       0,    81,    80,    83,    82,    86,    85,    84,     0,     0,
       0,    39,     0,     0,     0,    20,    24,    23,    93,     0,
       0,    78,    14,    76,    19,     0,     0,     0,    56,    78,
      52,    63,    76,    45,     0,    46,    48,    76,    55,    79,
       0,    28,    59,    60,     0,    61,     0,    72,     0,    74,
       0,    41,     0,     0,    21,     0,     0,    57,    91,     0,
      76,     0,    44,     0,     0,    62,    73,    75,     0,    99,
      98,     0,     0,     0,    47,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    12,    87,    88,    89,    90,
       0,     0,     0,     0,    33,    35,    17,     0,    13,     0,
      16,    18
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short yydefgoto[] =
{
      -1,     8,     9,    10,    11,    12,   120,   184,   197,    13,
      14,    15,    52,    53,    54,    55,    56,    17,    31,    68,
      69,   121,   134,   135,    58,    59,    60,    61,   100,    62,
      63,   108,   128,   159,    64,    71,    65
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -113
static const short yypact[] =
{
     266,   -17,  -113,    -9,   -22,   -22,   -13,     1,    70,    36,
      51,  -113,  -113,  -113,  -113,  -113,    -4,    55,    54,   -22,
      68,    71,    55,    82,    83,  -113,  -113,  -113,  -113,   117,
     278,  -113,  -113,    77,   117,   145,    80,    86,    78,    85,
     -14,  -113,  -113,  -113,  -113,  -113,    13,    88,  -113,   -14,
      89,  -113,    93,   104,  -113,  -113,   105,   329,  -113,  -113,
     101,   364,   340,   340,   347,    96,  -113,  -113,   100,   119,
    -113,  -113,   141,   145,   118,   127,   129,  -113,   227,   130,
    -113,   146,  -113,    43,   -14,   159,    17,   269,   114,  -113,
     145,  -113,   -14,   -14,  -113,  -113,  -113,  -113,  -113,  -113,
     186,  -113,  -113,  -113,  -113,  -113,  -113,  -113,   193,   212,
      55,  -113,   293,    -6,   131,  -113,  -113,  -113,     3,   241,
     137,  -113,   340,  -113,  -113,    28,   241,   241,  -113,   183,
     101,   320,   265,  -113,   128,   140,   340,    30,  -113,  -113,
     142,  -113,   174,  -113,   241,  -113,   241,  -113,   241,  -113,
     148,  -113,   167,   168,  -113,   269,   227,  -113,   340,   149,
      -1,   172,  -113,   241,   241,  -113,  -113,  -113,    55,  -113,
    -113,    48,   241,   241,  -113,   173,   175,   153,   178,    31,
      49,   241,   -22,   166,   170,  -113,  -113,  -113,  -113,  -113,
     171,   176,   182,   187,  -113,  -113,   184,   179,  -113,   182,
    -113,  -113
};

/* YYPGOTO[NTERM-NUM].  */
static const short yypgoto[] =
{
    -113,  -113,   231,  -113,  -113,  -113,    87,  -113,    45,  -113,
    -113,  -113,   -18,  -113,  -113,     0,   208,   240,   -21,   136,
    -113,    19,    95,  -113,  -113,  -113,   -26,   -93,  -113,   -41,
     -84,   188,   124,  -112,   -28,  -113,   -25
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -93
static const short yytable[] =
{
      16,    36,    70,    20,    21,    72,    39,   145,    87,     1,
      16,    80,    40,    18,    82,   161,    74,    76,   152,    33,
      92,    93,     1,    86,   147,   149,    44,    45,    81,    47,
      48,    49,    23,    28,   -92,    29,   153,   122,   -15,    51,
      83,    19,    84,   131,   136,   -92,    24,   -92,    57,   -15,
     123,   165,   175,    57,    57,   114,   132,   137,   130,    57,
     179,   180,   166,   138,   167,   -49,   142,   143,    57,   190,
      25,   125,   141,   126,    26,   127,   -49,   186,   155,   187,
     123,   123,     1,   177,    70,   158,   158,    72,   126,   150,
     127,   123,    57,     3,   178,   188,    32,   189,   160,   160,
      30,     4,     5,   129,    92,    93,     6,    34,     7,    57,
      35,    57,    57,    37,    38,   122,    73,    77,   123,    57,
     123,    78,   136,   158,    79,    44,    45,    66,   123,    48,
      89,   158,   158,    85,    88,   137,   160,    39,    51,    90,
     158,   110,    91,    40,   160,   160,   111,   176,     1,    41,
      42,    43,   113,   160,   112,   115,   140,    44,    45,    46,
      47,    48,    49,    57,   116,    39,   117,   124,   154,    50,
      51,    40,   156,    83,   162,   163,     1,   164,    93,    39,
     169,   170,   191,   168,   172,    44,    45,    46,    47,    48,
      49,   -64,   -64,   -64,   -64,   -64,   -64,    50,    51,    44,
      45,    66,    47,    48,   119,   133,    39,   173,   181,   183,
     182,   192,    51,    39,   144,   185,   193,   194,   -54,   199,
     -54,   146,   195,   196,   198,   200,    44,    45,    66,    47,
      48,   119,    39,    44,    45,    66,    47,    48,   119,    51,
     148,    27,    75,   171,   201,    22,    51,    39,   151,   157,
       0,   109,    44,    45,    66,    47,    48,   119,   174,     0,
       0,    39,     0,     0,     0,    51,     0,    44,   118,    66,
      47,    48,   119,   -65,   -65,   -65,   -65,   -65,   -65,     0,
      51,    44,    45,    66,    47,    48,   119,   101,   102,   103,
     104,   105,   106,   107,    51,     0,     0,     1,     0,     0,
     -53,     0,   -53,     0,     2,     0,     0,     0,     3,     0,
      41,    42,    43,     0,     0,   139,     4,     5,    44,    45,
      66,     6,    48,     7,    67,    41,    42,    43,     0,     0,
       0,    51,     0,    44,    45,    66,     0,    48,   101,   102,
     103,   104,   105,   106,   107,     0,    51,   -78,   -78,   -78,
     -78,   -78,   -78,   -78,     0,   -51,     0,   -51,   101,   102,
     103,   104,   105,   106,   107,   -76,   -76,   -76,   -76,   -76,
     -76,   -76,    94,    95,    96,    97,    98,    99
};

static const short yycheck[] =
{
       0,    22,    30,     3,     4,    30,    20,   100,    49,    31,
      10,    39,    26,    30,    40,   127,    34,    35,    24,    19,
       3,     4,    31,    49,   108,   109,    40,    41,    42,    43,
      44,    45,    45,    37,    35,    39,    42,    78,    35,    53,
      27,    50,    29,    84,    85,    46,    45,    48,    29,    46,
      78,   144,   164,    34,    35,    73,    84,    85,    84,    40,
     172,   173,   146,    46,   148,    35,    92,    93,    49,   181,
       0,    28,    90,    45,    38,    47,    46,    46,   119,    48,
     108,   109,    31,    35,   112,   126,   127,   112,    45,   110,
      47,   119,    73,    42,    46,    46,    42,    48,   126,   127,
      45,    50,    51,    84,     3,     4,    55,    39,    57,    90,
      39,    92,    93,    31,    31,   156,    39,    37,   146,   100,
     148,    35,   163,   164,    46,    40,    41,    42,   156,    44,
      37,   172,   173,    45,    45,   163,   164,    20,    53,    35,
     181,    45,    37,    26,   172,   173,    46,   168,    31,    32,
      33,    34,    11,   181,    35,    37,    42,    40,    41,    42,
      43,    44,    45,   144,    37,    20,    37,    37,    37,    52,
      53,    26,    35,    27,    46,    35,    31,    35,     4,    20,
      13,    13,   182,    35,    35,    40,    41,    42,    43,    44,
      45,     8,     9,    10,    11,    12,    13,    52,    53,    40,
      41,    42,    43,    44,    45,    46,    20,    35,    35,    56,
      35,    45,    53,    20,    28,    37,    46,    46,    35,    35,
      37,    28,    46,    41,    37,    46,    40,    41,    42,    43,
      44,    45,    20,    40,    41,    42,    43,    44,    45,    53,
      28,    10,    34,   156,   199,     5,    53,    20,   112,   125,
      -1,    63,    40,    41,    42,    43,    44,    45,   163,    -1,
      -1,    20,    -1,    -1,    -1,    53,    -1,    40,    41,    42,
      43,    44,    45,     8,     9,    10,    11,    12,    13,    -1,
      53,    40,    41,    42,    43,    44,    45,    18,    19,    20,
      21,    22,    23,    24,    53,    -1,    -1,    31,    -1,    -1,
      35,    -1,    37,    -1,    38,    -1,    -1,    -1,    42,    -1,
      32,    33,    34,    -1,    -1,    46,    50,    51,    40,    41,
      42,    55,    44,    57,    46,    32,    33,    34,    -1,    -1,
      -1,    53,    -1,    40,    41,    42,    -1,    44,    18,    19,
      20,    21,    22,    23,    24,    -1,    53,    18,    19,    20,
      21,    22,    23,    24,    -1,    35,    -1,    37,    18,    19,
      20,    21,    22,    23,    24,    18,    19,    20,    21,    22,
      23,    24,     8,     9,    10,    11,    12,    13
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned char yystos[] =
{
       0,    31,    38,    42,    50,    51,    55,    57,    63,    64,
      65,    66,    67,    71,    72,    73,    77,    79,    30,    50,
      77,    77,    79,    45,    45,     0,    38,    64,    37,    39,
      45,    80,    42,    77,    39,    39,    80,    31,    31,    20,
      26,    32,    33,    34,    40,    41,    42,    43,    44,    45,
      52,    53,    74,    75,    76,    77,    78,    83,    86,    87,
      88,    89,    91,    92,    96,    98,    42,    46,    81,    82,
      96,    97,    98,    39,    74,    78,    74,    37,    35,    46,
      96,    42,    88,    27,    29,    45,    88,    91,    45,    37,
      35,    37,     3,     4,     8,     9,    10,    11,    12,    13,
      90,    18,    19,    20,    21,    22,    23,    24,    93,    93,
      45,    46,    35,    11,    74,    37,    37,    37,    41,    45,
      68,    83,    91,    96,    37,    28,    45,    47,    94,    83,
      88,    91,    96,    46,    84,    85,    91,    96,    46,    46,
      42,    74,    88,    88,    28,    89,    28,    92,    28,    92,
      80,    81,    24,    42,    37,    91,    35,    94,    91,    95,
      96,    95,    46,    35,    35,    89,    92,    92,    35,    13,
      13,    68,    35,    35,    84,    95,    80,    35,    46,    95,
      95,    35,    35,    56,    69,    37,    46,    48,    46,    48,
      95,    77,    45,    46,    46,    46,    41,    70,    37,    35,
      46,    70
};

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror (ctxt, "syntax error: cannot back up");\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)		\
   ((Current).first_line   = (Rhs)[1].first_line,	\
    (Current).first_column = (Rhs)[1].first_column,	\
    (Current).last_line    = (Rhs)[N].last_line,	\
    (Current).last_column  = (Rhs)[N].last_column)
#endif

/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, ctxt)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YYDSYMPRINT(Args)			\
do {						\
  if (yydebug)					\
    yysymprint Args;				\
} while (0)

# define YYDSYMPRINTF(Title, Token, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Token, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short *bottom, short *top)
#else
static void
yy_stack_print (bottom, top)
    short *bottom;
    short *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YYDSYMPRINT(Args)
# define YYDSYMPRINTF(Title, Token, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if defined (YYMAXDEPTH) && YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

#endif /* !YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    {
      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
# ifdef YYPRINT
      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
    }
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yytype, yyvaluep)
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse ( OL_Context *ctxt );
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse ( OL_Context *ctxt )
#else
int
yyparse (ctxt)
     OL_Context *ctxt ;
#endif
#endif
{
  /* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 111 "ol_parser.y"
    { YYACCEPT; }
    break;

  case 3:
#line 112 "ol_parser.y"
    { YYACCEPT; }
    break;

  case 11:
#line 126 "ol_parser.y"
    { ctxt->fact(yyvsp[-1].u_term); }
    break;

  case 12:
#line 131 "ol_parser.y"
    { ctxt->table(yyvsp[-6].v, yyvsp[-4].v, yyvsp[-2].v); }
    break;

  case 13:
#line 135 "ol_parser.y"
    { ctxt->table(yyvsp[-8].v, yyvsp[-6].v, yyvsp[-4].v, yyvsp[-2].u_exprlist); }
    break;

  case 14:
#line 139 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 15:
#line 141 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 16:
#line 144 "ol_parser.y"
    {
			yyval.u_exprlist = yyvsp[-1].u_exprlist;
		}
    break;

  case 17:
#line 149 "ol_parser.y"
    { yyval.u_exprlist = New Parse_ExprList(); yyval.u_exprlist->push_front(yyvsp[0].v); }
    break;

  case 18:
#line 151 "ol_parser.y"
    { yyvsp[0].u_exprlist->push_front(yyvsp[-2].v); yyval.u_exprlist=yyvsp[0].u_exprlist; }
    break;

  case 19:
#line 154 "ol_parser.y"
    {
			ctxt->watch(yyvsp[-2].v);
		}
    break;

  case 20:
#line 159 "ol_parser.y"
    { 
                    ctxt->rule(yyvsp[-3].u_term, yyvsp[-1].u_termlist, false, yyvsp[-4].v); }
    break;

  case 21:
#line 161 "ol_parser.y"
    { 
		    ctxt->rule(yyvsp[-3].u_term, yyvsp[-1].u_termlist, true, yyvsp[-5].v); }
    break;

  case 22:
#line 163 "ol_parser.y"
    { 
                    ctxt->rule(yyvsp[-3].u_term, yyvsp[-1].u_termlist, false); }
    break;

  case 23:
#line 165 "ol_parser.y"
    { 
		    ctxt->rule(yyvsp[-3].u_term, yyvsp[-1].u_termlist, true); }
    break;

  case 24:
#line 167 "ol_parser.y"
    {
		    ctxt->aggRule(yyvsp[-3].u_term, yyvsp[-1].u_aggterm, false, yyvsp[-4].v); 
		  }
    break;

  case 25:
#line 170 "ol_parser.y"
    {
                    ctxt->aggRule(yyvsp[-3].u_term, yyvsp[-1].u_aggterm, false);
		  }
    break;

  case 26:
#line 175 "ol_parser.y"
    {
		   ctxt->query(New Parse_Functor(yyvsp[-2].u_functorname, yyvsp[-1].u_exprlist)); }
    break;

  case 27:
#line 179 "ol_parser.y"
    { yyval.u_termlist = New Parse_TermList(); yyval.u_termlist->push_front(yyvsp[0].u_term); }
    break;

  case 28:
#line 180 "ol_parser.y"
    { yyvsp[0].u_termlist->push_front(yyvsp[-2].u_term); yyval.u_termlist=yyvsp[0].u_termlist; }
    break;

  case 32:
#line 183 "ol_parser.y"
    { yyval.u_term=yyvsp[0].u_term; }
    break;

  case 33:
#line 187 "ol_parser.y"
    { yyval.u_term=New Parse_RangeFunction(yyvsp[-5].v, yyvsp[-3].v, yyvsp[-1].v); }
    break;

  case 34:
#line 191 "ol_parser.y"
    { yyval.u_term=New Parse_Functor(yyvsp[-1].u_functorname, yyvsp[0].u_exprlist); }
    break;

  case 35:
#line 195 "ol_parser.y"
    { yyval.u_aggterm = New Parse_AggTerm(yyvsp[-7].u_aoper, yyvsp[-5].u_exprlist, yyvsp[-3].u_exprlist, yyvsp[-1].u_term); }
    break;

  case 36:
#line 199 "ol_parser.y"
    { yyval.u_functorname = New Parse_FunctorName(yyvsp[0].v); }
    break;

  case 37:
#line 201 "ol_parser.y"
    { yyval.u_functorname = New Parse_FunctorName(yyvsp[-2].v,yyvsp[0].v); }
    break;

  case 38:
#line 205 "ol_parser.y"
    { yyval.u_exprlist=New Parse_ExprList(); }
    break;

  case 39:
#line 207 "ol_parser.y"
    { yyval.u_exprlist=yyvsp[-1].u_exprlist; }
    break;

  case 40:
#line 209 "ol_parser.y"
    { 
			yyval.u_exprlist = New Parse_ExprList(); 
			yyval.u_exprlist->push_front(yyvsp[0].v); }
    break;

  case 41:
#line 212 "ol_parser.y"
    {
			yyvsp[0].u_exprlist->push_front(yyvsp[-2].v); 
			yyval.u_exprlist=yyvsp[0].u_exprlist; }
    break;

  case 42:
#line 218 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 43:
#line 220 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 44:
#line 225 "ol_parser.y"
    { yyval.v = New Parse_Function(yyvsp[-3].v, yyvsp[-1].u_exprlist); }
    break;

  case 45:
#line 227 "ol_parser.y"
    { yyval.v = New Parse_Function(yyvsp[-2].v, New Parse_ExprList()); }
    break;

  case 46:
#line 230 "ol_parser.y"
    { 
			yyval.u_exprlist = New Parse_ExprList(); 
			yyval.u_exprlist->push_front(yyvsp[0].v); }
    break;

  case 47:
#line 233 "ol_parser.y"
    { 
			yyvsp[0].u_exprlist->push_front(yyvsp[-2].v); 
			yyval.u_exprlist=yyvsp[0].u_exprlist; }
    break;

  case 48:
#line 239 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 49:
#line 241 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 50:
#line 245 "ol_parser.y"
    { yyval.u_term = New Parse_Select(yyvsp[0].v); }
    break;

  case 51:
#line 249 "ol_parser.y"
    { yyval.u_term = New Parse_Assign(yyvsp[-2].v, yyvsp[0].v); }
    break;

  case 52:
#line 251 "ol_parser.y"
    { yyval.u_term = New Parse_Assign(yyvsp[-2].v, yyvsp[0].v); }
    break;

  case 53:
#line 253 "ol_parser.y"
    { yyval.u_term = New Parse_Assign(yyvsp[-2].v, yyvsp[0].v); }
    break;

  case 54:
#line 255 "ol_parser.y"
    { yyval.u_term = New Parse_Assign(yyvsp[-2].v, yyvsp[0].v); }
    break;

  case 55:
#line 259 "ol_parser.y"
    { yyval.v = yyvsp[-1].v; }
    break;

  case 56:
#line 261 "ol_parser.y"
    { yyval.v = New Parse_Bool(Parse_Bool::RANGE, yyvsp[-2].v, yyvsp[0].v); }
    break;

  case 57:
#line 263 "ol_parser.y"
    { yyval.v = New Parse_Bool(Parse_Bool::RANGE, yyvsp[-3].v, yyvsp[0].v, true); }
    break;

  case 58:
#line 265 "ol_parser.y"
    { yyval.v = New Parse_Bool(Parse_Bool::NOT, yyvsp[0].v ); }
    break;

  case 59:
#line 267 "ol_parser.y"
    { yyval.v = New Parse_Bool(Parse_Bool::OR, yyvsp[-2].v, yyvsp[0].v ); }
    break;

  case 60:
#line 269 "ol_parser.y"
    { yyval.v = New Parse_Bool(Parse_Bool::AND, yyvsp[-2].v, yyvsp[0].v ); }
    break;

  case 61:
#line 271 "ol_parser.y"
    { yyval.v = New Parse_Bool(yyvsp[-1].u_boper, yyvsp[-2].v, yyvsp[0].v ); }
    break;

  case 62:
#line 273 "ol_parser.y"
    { yyval.v = New Parse_Bool(yyvsp[-2].u_boper, yyvsp[-3].v, yyvsp[0].v, true); }
    break;

  case 63:
#line 277 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 64:
#line 279 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 65:
#line 281 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 66:
#line 284 "ol_parser.y"
    { yyval.u_boper = Parse_Bool::EQ; }
    break;

  case 67:
#line 285 "ol_parser.y"
    { yyval.u_boper = Parse_Bool::NEQ; }
    break;

  case 68:
#line 286 "ol_parser.y"
    { yyval.u_boper = Parse_Bool::GT; }
    break;

  case 69:
#line 287 "ol_parser.y"
    { yyval.u_boper = Parse_Bool::LT; }
    break;

  case 70:
#line 288 "ol_parser.y"
    { yyval.u_boper = Parse_Bool::GTE; }
    break;

  case 71:
#line 289 "ol_parser.y"
    { yyval.u_boper = Parse_Bool::LTE; }
    break;

  case 72:
#line 293 "ol_parser.y"
    { yyval.v = New Parse_Math(yyvsp[-1].u_moper, yyvsp[-2].v, yyvsp[0].v ); }
    break;

  case 73:
#line 295 "ol_parser.y"
    { yyval.v = New Parse_Math(yyvsp[-2].u_moper, yyvsp[-3].v, yyvsp[0].v, true ); }
    break;

  case 74:
#line 297 "ol_parser.y"
    { yyval.v = New Parse_Math(yyvsp[-1].u_moper, yyvsp[-2].v, yyvsp[0].v ); }
    break;

  case 75:
#line 299 "ol_parser.y"
    { yyval.v = New Parse_Math(yyvsp[-2].u_moper, yyvsp[-3].v, yyvsp[0].v, true ); }
    break;

  case 76:
#line 303 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 77:
#line 305 "ol_parser.y"
    { (dynamic_cast<Parse_Val*>(yyvsp[0].v))->neg(true); yyval.v = yyvsp[0].v; }
    break;

  case 78:
#line 307 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 79:
#line 309 "ol_parser.y"
    { yyval.v = yyvsp[-1].v; }
    break;

  case 80:
#line 312 "ol_parser.y"
    { yyval.u_moper = Parse_Math::LSHIFT; }
    break;

  case 81:
#line 313 "ol_parser.y"
    { yyval.u_moper = Parse_Math::RSHIFT; }
    break;

  case 82:
#line 314 "ol_parser.y"
    { yyval.u_moper = Parse_Math::PLUS; }
    break;

  case 83:
#line 315 "ol_parser.y"
    { yyval.u_moper = Parse_Math::MINUS; }
    break;

  case 84:
#line 316 "ol_parser.y"
    { yyval.u_moper = Parse_Math::TIMES; }
    break;

  case 85:
#line 317 "ol_parser.y"
    { yyval.u_moper = Parse_Math::DIVIDE; }
    break;

  case 86:
#line 318 "ol_parser.y"
    { yyval.u_moper = Parse_Math::MODULUS; }
    break;

  case 87:
#line 323 "ol_parser.y"
    { yyval.v = New Parse_Range(Parse_Range::RANGEOO, yyvsp[-3].v, yyvsp[-1].v); }
    break;

  case 88:
#line 325 "ol_parser.y"
    { yyval.v = New Parse_Range(Parse_Range::RANGEOC, yyvsp[-3].v, yyvsp[-1].v); }
    break;

  case 89:
#line 327 "ol_parser.y"
    { yyval.v = New Parse_Range(Parse_Range::RANGECO, yyvsp[-3].v, yyvsp[-1].v); }
    break;

  case 90:
#line 329 "ol_parser.y"
    { yyval.v = New Parse_Range(Parse_Range::RANGECC, yyvsp[-3].v, yyvsp[-1].v); }
    break;

  case 91:
#line 333 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 92:
#line 335 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 96:
#line 340 "ol_parser.y"
    { yyval.v = yyvsp[0].v; }
    break;

  case 97:
#line 342 "ol_parser.y"
    { yyval.v = Parse_Expr::Now; }
    break;

  case 98:
#line 346 "ol_parser.y"
    { yyval.v = New Parse_Agg(yyvsp[-1].v, yyvsp[-3].u_aoper); }
    break;

  case 99:
#line 349 "ol_parser.y"
    { yyval.v = New Parse_Agg(Parse_Agg::DONT_CARE, yyvsp[-3].u_aoper); }
    break;

  case 100:
#line 352 "ol_parser.y"
    { yyval.u_aoper = Parse_Agg::MIN; }
    break;

  case 101:
#line 353 "ol_parser.y"
    { yyval.u_aoper = Parse_Agg::MAX; }
    break;

  case 102:
#line 354 "ol_parser.y"
    { yyval.u_aoper = Parse_Agg::COUNT; }
    break;


    }

/* Line 1000 of yacc.c.  */
#line 1830 "ol_parser.tab.c"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  int yytype = YYTRANSLATE (yychar);
	  const char* yyprefix;
	  char *yymsg;
	  int yyx;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 0;

	  yyprefix = ", expecting ";
	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		yysize += yystrlen (yyprefix) + yystrlen (yytname [yyx]);
		yycount += 1;
		if (yycount == 5)
		  {
		    yysize = 0;
		    break;
		  }
	      }
	  yysize += (sizeof ("syntax error, unexpected ")
		     + yystrlen (yytname[yytype]));
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);

	      if (yycount < 5)
		{
		  yyprefix = ", expecting ";
		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			yyp = yystpcpy (yyp, yyprefix);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yyprefix = " or ";
		      }
		}
	      yyerror (ctxt, yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror (ctxt, "syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror (ctxt, "syntax error");
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* If at end of input, pop the error token,
	     then the rest of the stack, then return failure.  */
	  if (yychar == YYEOF)
	     for (;;)
	       {
		 YYPOPSTACK;
		 if (yyssp == yyss)
		   YYABORT;
		 YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
		 yydestruct (yystos[*yyssp], yyvsp);
	       }
        }
      else
	{
	  YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
	  yydestruct (yytoken, &yylval);
	  yychar = YYEMPTY;

	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

#ifdef __GNUC__
  /* Pacify GCC when the user code never invokes YYERROR and the label
     yyerrorlab therefore never appears in user code.  */
  if (0)
     goto yyerrorlab;
#endif

  yyvsp -= yylen;
  yyssp -= yylen;
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
      yydestruct (yystos[yystate], yyvsp);
      YYPOPSTACK;
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;


  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror (ctxt, "parser stack overflow");
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


#line 357 "ol_parser.y"


// Epilog
		
#undef yylex
#include "ol_lexer.h"

static int ol_parser_lex (YYSTYPE *lvalp, OL_Context *ctxt)
{
  return ctxt->lexer->yylex(lvalp, ctxt);
}
static void ol_parser_error(OL_Context *ctxt, str msg)
{
  ctxt->error(msg);
}


