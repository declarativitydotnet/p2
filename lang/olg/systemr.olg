namespace systemr {

  materialize(plan, 10000, infinity, keys(4)).
  materialize(bestPlan, infinity, infinity, keys(5)).
  materialize(rules, 10000, infinity, keys(2)).
  materialize(completeRule, 10000, infinity, keys(2,3)).
  materialize(assigns, 10000, infinity, keys(2, 3)).
  materialize(commitPlan, infinity, infinity, keys(2, 3)).
  materialize(costs, infinity, 10000, keys(2, 3, 4)).
  materialize(optstage, infinity, infinity, keys(2,3,4,5)).

  i0 counter(@A, Pid, Rid) :-
       programEvent(@A, Pid, _, _, _, _, _, _, _),
       ::sys::rule(@A, Rid, Pid, _, _, _, _, _, _).

  i1 assigns(@A, Pid, Rid, a_count<*>) :-
       counter(@A, Pid, Rid),
       ::sys::assign(@A, Aid, Rid, Var, Value, Pos).

  i2 rules(@A, Pid, a_count<Rid>) :-
       programEvent(@A, Pid, _, _, _, _, _, _, _),
       ::sys::rule(@A, Rid, Pid, _, _, _, _, Terms, _).

  /***********************************************************************/
  f0 completeRuleCount(@A, Pid, a_count<Rid>) :-
      completeRule(@A, Pid, Rid).

  f1 finalize(@A, Pid) :-
      completeRuleCount(@A, Pid, CCount),
      rules(@A, Pid, Count), Count <= CCount.

  /***********************************************************************/
  /* Termination rules. */

  t2 ::sys::program_add(@A, Pid, Name, Rewrite, "systemr", Text, Msg, P2DL, Src) :-
         finalize(@A, Pid),
         ::sys::program(@A, Pid, Name, Rewrite, Status, Text, Msg, P2DL, Src).

  /***********************************************************************/
  /* Start the optimization process */
  /* Get the program event and seed the optimization with the event predicate. */
  o1a plan(@A, Pid, Rid, PlanID, SubPlanID, Type, TypeID, 
            Plan, Schema, Card, Cost, Pos, AM, Group) :-
            programEvent(@A, Pid, _, _, _, _, _, _, _),
            ::sys::rule(@A, Rid, Pid, _, _, _, _, Terms, _),
            ::sys::predicate(@A, Fid, Rid, _, _, _, _, Schema, Pos, _, _),
            Pos == 1,
            PlanID    := f_idgen(),
            SubPlanID := null,
            Type      := "Predicate",
            TypeID    := Fid,
            Plan      := f_cons(Fid, null),
            Schema    := Schema,
            Card      := 1,
            Cost      := 1,
            Pos       := 1U,
            AM        := "EVENT",
            Group      := f_group(Plan).

  watchmod(bestPlanUpdate, "r").
  o1c addAssigns(@A, Pid, Rid, PlanID) :-
              bestPlanUpdate(@A, Pid, Rid, PlanID),
              plan(@A, Pid, Rid, PlanID, _, _, _, Plan, _, _, _, _, _, _),
              assigns(@A, Pid, Rid, Count),
              ::sys::rule(@A, Rid, Pid, _, _, _, _, Terms, _),
              f_size(Plan) + 1 >= Terms - Count.

  /***********************************************************************/
  /* Detect an update to the local plan table */
  sg1 optstage(@A, Pid, Rid, Group, f_size(Plan)) :- 
        plan(@A, Pid, Rid, _, _, _, _, Plan, _, _, _, _, _, Group).

  sg2 stageUpdate(@A, Pid, Rid, Group, Size) :-
        optstage(@A, Pid, Rid, Group, Size).

  /***********************************************************************/
  /* A new best plan write. */
  bp0 bestPlanUpdate(@A, Pid, Rid, PlanID) :-
       bestPlan(@A, Pid, Rid, PlanID, _, _, _).

  bp0a costs(@A, Pid, Rid, Group, Size, Cost) :-
        stageUpdate(@A, Pid, Rid, Group, Size),
        plan(@A, Pid, Rid, _, _, _, _, _, _, _, Cost, _, _, Group).

  /* Pick the minimum cost over the plans with the max size. */
  bp1 bestCostPlan(@A, Pid, Rid, Group, Size, a_min<Cost>) :-
        costs(@A, Pid, Rid, Group, Size, Cost).

  bp2 bestPlan(@A, Pid, Rid, PlanID, Group, Size, Cost) :-
       bestCostPlan(@A, Pid, Rid, Group, Size, Cost),
       plan(@A, Pid, Rid, PlanID, _, _, _, _, _, _, Cost, _, _, Group).

  /* Identify completed plans. */
  bp3 completeRule(@A, Pid, Rid) :-
              bestPlanUpdate(@A, Pid, _,  _),
              bestPlan(@A, Pid, Rid, _, _, Size, Cost),
              ::sys::rule(@A, Rid, Pid, _, _, _, _, Terms, _),
              Size == Terms - 1.

/*
  delete plan(@A, Pid, Rid, PlanID, SubPlanID, Type, TypeID, Plan, Schema, 
              Card, Cost, Pos, AM, Group) :-
           bestPlanUpdate(@A, Pid, Rid, _),
           bestPlan(@A, Pid, Rid, _, _, Size, _),
           plan(@A, Pid, Rid, PlanID, SubPlanID, Type, TypeID, Plan, Schema, 
                 Card, Cost, Pos, AM, Group),
           f_size(Plan) < Size.
*/
  
  /***********************************************************************/
  /* Search for the an index join */
  o4 plan(@A, Pid, Rid, f_idgen(), PlanID, "Predicate", Fid, 
          Plan, f_merge(OuterSchema,PredSchema), 
          Card, Cost, OuterPos+1U, f_cons(Type, Iid), Group) :-
        bestPlanUpdate(@A, Pid, Rid, PlanID),
        plan(@A, Pid, Rid, PlanID, _, _, _, OuterPlan, OuterSchema, 
             OuterCard, OuterCost, OuterPos, _, _),
        ::sys::predicate(@A, Fid, Rid, _, Tablename, _, _, PredSchema, PredPos, _, _),
        ::sys::table(@A, _, Tablename, _, _, _, TCard, _, _),
        ::sys::index(@A, Iid, Tablename, Key, Type, Selectivity),
        PredPos > 1,
        f_contains(Fid, OuterPlan) == false,
        f_indexMatch(OuterSchema, PredSchema, Key) == true,
        Card   := OuterCard * (Selectivity * TCard),
        Cost   := OuterCost + (OuterCard * (Selectivity * TCard)),
        Plan   := f_cons(Fid, OuterPlan),
        Group  := f_group(Plan).

  /***********************************************************************/
  /* Make a scan for this table predicate. */
  o6 plan(@A, Pid, Rid, f_idgen(), PlanID, "Predicate", Fid, 
          NewPlan, Schema, Card, Cost, OuterPos+1U, AM, Group) :-
        bestPlanUpdate(@A, Pid, Rid, PlanID),
        plan(@A, Pid, Rid, PlanID, _, _, _, OuterPlan, OuterSchema, 
             OuterCard, OuterCost, OuterPos, _, _),
        ::sys::predicate(@A, Fid, Rid, _, Name, _, _, F_Schema, F_Pos, _, _),
        ::sys::table(@A, _, Name, _, _, _, T_Card, _, _),
        F_Pos > 1,
        f_contains(Fid, OuterPlan) == false,
        Cost   := OuterCost + (OuterCard * T_Card),
        Card   := OuterCard * T_Card / 10,
        NewPlan:= f_cons(Fid, OuterPlan), 
        Group := f_group(NewPlan),
        Schema := f_merge(OuterSchema, F_Schema),
        AM     := f_cons("SCAN", null). 

  /***********************************************************************/
  /* Perform next selection? */
  o8 plan(@A, Pid, Rid, f_idgen(), PlanID, "Select", Sid, 
          NewPlan, Schema, Card, Cost, OuterPos+1U, AM, Group) :-
      bestPlanUpdate(@A, Pid, Rid, PlanID),
      plan(@A, Pid, Rid, PlanID, _, _, _, OuterPlan, OuterSchema, 
           OuterCard, OuterCost, OuterPos, _, _),
      ::sys::select(@A, Sid, Rid, S_Bool, _, _),
      f_contains(Sid, OuterPlan) == false,
      f_filter(OuterSchema, S_Bool) == true,
      Cost      := OuterCost,
      Card      := OuterCard / 3,
      NewPlan   := f_cons(Sid, OuterPlan), 
      Group     := f_group(NewPlan),
      Schema    := OuterSchema,
      AM        := f_cons("FILTER", null). 

  /***********************************************************************/
  /* Add assignment? */
  o9 plan(@A, Pid, Rid, f_idgen(), PlanID, "Assign", Aid, Plan, Schema, 
          OuterCard, OuterCost, OuterPos+1U, AM, Group) :-
        addAssigns(@A, Pid, Rid, PlanID),
        plan(@A, Pid, Rid, PlanID, _, _, _, OuterPlan, OuterSchema, 
             OuterCard, OuterCost, OuterPos, _, Group),
        ::sys::assign(@A, Aid, Rid, Var, _, _),
        f_contains(Aid, OuterPlan) == false,
        Plan      := f_cons(Aid, OuterPlan), 
        Schema    := f_assignschema(OuterSchema, Var),
        AM        := f_cons("ASSIGN", null). 

}
