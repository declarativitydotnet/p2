/*
 * (@#)$Id: ring.olg 1176 2006-09-26 11:06:24Z maniatis $
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300,
 * Berkeley, CA, 94704.  Attention:  Intel License Inquiry.
 * Or
 * UC Berkeley EECS Computer Science Division, 387 Soda Hall #1776, 
 * Berkeley, CA,  94707. Attention: P2 Group.
 * 
 * DESCRIPTION: A rewrite that inserts a dummy rule for all those events
 * that are being watched but for which there is no listening rule. The
 * rewrite works by finding those watched events (with at least the "c"
 * modifier) that don't have rules reading them. For those it creates a
 * new rule with that event as the right-hand-side, and a DROP ECA
 * action as the left hand side.
 *
 */

namespace dummyWatch {

  /** Entry into this rewrite */
  a0 startDummyWatch(@A, Pid) :-
        programEvent(@A, Pid, _, _, _, _, _, _, Src).


  /** Find watched events without rules listening for them */
  f1 blah() :-
	startDummyWatch(@A, Pid),		/* Rewrite trigger */
        ::sys::watch(@A, WatchID, Pid, WatchedTuple, Modifier), /* Watches */
	


        ::sys::rule(@A, Rid, Pid, _, _, _, _, _, _),
        ::sys::predicate(@A, PredID, Rid, _, Name, _, ECA, Schema, _, _, _),
        Name == "periodic".




	

  /** Exit from this rewrite */
  z0 ::sys::program_add(@A, Pid, Name, Rewrite, "dummyWatch", Text, Msg,
	P2DL, Src) :-
        done(@A, Pid),
        ::sys::program(@A, Pid, Name, Rewrite, Status, Text, Msg, P2DL, Src).
}
