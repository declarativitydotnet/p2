namespace stratify {
  materialize(dependency, infinity, infinity, keys(1,2,3,4)).
  materialize(strata, infinity, infinity, keys(1,2)).

  s1 ::sys::program_add(@A, Pid, Name, Rewrite, "stratify", Text, Msg, P2DL, Src) :-
        programEvent(@A, Pid, _, _, _, _, _, _, _),
        ::sys::program(@A, Pid, Name, Rewrite, Status, Text, Msg, P2DL, Src).

  /* This is computed (entirely) in the first fixed point. */
  s2 dependency(@A, HeadName, BodyName, Neg) :-
        programEvent(@A, Pid, _, _, _, _, _, _, _),
        ::sys::rule(@A, Rid, Pid, _, HeadPredID, _, _, _, _),
        ::sys::predicate(@A, HeadPredID, Rid, _, HeadName, _, _, _, _, _, _),
        ::sys::predicate(@A, PredID, Rid, Neg, BodyName, _, _, _, _, _, _).

  /* The dependency depends negatively on itself. */
  s3  strata(@A, Name, infinity) :-
        dependency(@A, Name, Name, true).

  s4 initStratum(@A, Name) :- 
       dependency(@A, Head, Body, Neg).

  /* We have a new dependency, and it does not depend negatively 
     on some other predicate. */
  s5 strata(@A, Name, 0) :-
        initStratum(@A, Name),
        notin dependency(@A, Name, _, true).

  s6 strata(@A, Head, Stratum+1) :-
       strata(@A, Name, Stratum),
       dependency(@A, Head, Name, true).
       
}
