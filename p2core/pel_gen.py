#!/usr/bin/env python
"""
 @(#)$Id$

Copyright (c) 2005 Intel Corporation. All rights reserved.

This file is distributed under the terms in the attached INTEL-LICENSE file.
If you do not find these files, copies can be found by writing to:
Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300,
Berkeley, CA, 94704.  Attention:  Intel License Inquiry.

DESCRIPTION: Generate the defintion of the PEL (P2 Expression
             Language) virtual machine
"""

import sys
import string

decls=[]
curop = 0

def emit_opcode( op, va ):
  global curop
  decls.append((curop, op, va))
  curop += 1
  
for op, va in [
  ("swap",	"SWAP"),
  ("dup",	"DUP"),
  ("!", 	"NOT"),
  ("and",	"AND"),
  ("or",	"OR"),
  ("xor",	"XOR"),
  ("<<",	"LSR"),
  (">>",	"LSL"),
  (">>>",	"ASL"),
  ("|",         "BITOR"),
  ("&",         "BITAND"),
  ("^",         "BITXOR"),
  ("~",         "BITNOT"),
  ("strcat",	"STRCAT"),
  ("strlen",	"STRLEN"),
  ("upper",	"STRUPPER"),
  ("lower",	"STRLOWER"),
  ("substr",	"SUBSTR"),
  ("match",	"STRMATCH"),
  ("like",	"STRLIKE"),
  ("ilike",	"STRILIKE") ]:  emit_opcode(op,va)

for op, va in [
  ("+",         "PLUS"),
  ("-",         "MINUS"),
  ("*",         "MUL"),
  ("/",         "DIV"),
  ("%",         "MOD"),
  ("@",         "ABS"),
  ("<",         "LT"),
  (">=",        "GE") ]:
  emit_opcode(op+"i", va+"_INT")
  emit_opcode(op+"f", va+"_DBL")
  
emit_opcode("<s", "LT_STR")
emit_opcode(">=s", "GE_STR")
emit_opcode("==", "EQ")
emit_opcode("push", "PUSH")

for i in [ "i32", "u32", "i64", "u64", "dbl", "str" ]:
  emit_opcode("->"+i, "CAST_" + i.upper())

emit_opcode("", "LD_CONST")
emit_opcode("", "LD_FIELD")

warning="""

/*
 * DO NOT EDIT THIS FILE.
 *
 * It is generated by %s
 *
 */
""" % sys.argv[0]


f = open("pel_opcode_decls.gen.h","w+")
f.write(warning)
f.write('public:\n')
map(lambda (n,o,v): f.write("  static const u_int32_t OP_%s = %d;\n" % (v, n)),
    decls)
f.write('  static const size_t NUM_OPCODES= %d;\n' % curop)

# f.write('private:\n')
map(lambda (n,o,v): f.write("  int op_%s(u_int32_t inst);\n" % v ),decls)
f.close()


f = open("pel_opcode_defns.gen.h","w+")
f.write(warning)
f.write('static JumpTableEnt_t jump_table[] = {\n')
f.write(string.join(map(lambda (n,o,v): '  {"%s", \t&Pel_VM::op_%s}' % (o,v), decls),
                    ',\n'))
f.write('\n};\n')
f.write('#define DEF_OP(_name) int Pel_VM::op_##_name(u_int32_t inst)\n')
f.close()

f = open("pel_opcode_tokens.gen.h","w+")
f.write(warning)
f.write(string.join(map(lambda (n,o,v): '  {"%s", \tPel_VM::OP_%s}' % (o,v), decls),
                    ',\n'))
f.write('\n')
f.close()
