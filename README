#####################################################################
#
# This file is distributed under the terms in the attached LICENSE file.
# If you do not find this file, copies can be found by writing to:
# Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300,
# Berkeley, CA, 94704.  Attention:  Intel License Inquiry.
# Or
# UC Berkeley EECS Computer Science Division, 387 Soda Hall #1776, 
# Berkeley, CA,  94707. Attention: P2 Group.
# 
# DESCRIPTION: Readme for P2 release.
# 
#   $Id$
#

------------------------------------------------------------
-- BUILDING
------------------------------------------------------------

P2's makefiles are generated with cmake.  See README.cmake for more
information.

Once you're happy with the cmake configuration, run:

   # make

and if that goes well, install:

   # make install

If you install into /usr/local or another shared prefix, you may need
to run the "make install" command as root.

Remember never to edit Makefile.  Instead, edit CMakeCache.txt or use
ccmake.  If you're still having problems, ask the nice folks on
p2devel@yahoogroups.com.

NOTE ABOUT FLEX:

Make sure to have flex version 2.5.31 or greater installed before
building the project.  Fedora Core 7 and 8 come with version 2.5.33.
Users of earlier releases should install a newer flex package. For
instance, prebuilt binaries for 2.5.31-5 are available on the web.

NOTE ABOUT AUTOMAKE:

P2's automake files are deprecated, and have been replaced with cmake.

If you still want to run automake (i.e., if you want to run ./setup),
make sure you have automake version 1.9 or greater.  Automake builds
were last tested with libtool version 1.5.16.

NOTE ABOUT GCC:

Please use gcc version 4.0 and later to compile P2. Make sure that the
same major version is used to compile the boost binaries you are
using. When compiling on a current version of Fedora Core (e.g. FC5
through FC8) this is usually the case.

NOTE ABOUT BOOST:

Most of us develop against Boost version 1.33 or 1.34.  Support for
Boost 1.32 is deprecated.

It is difficult to get boost test to link in a portable fashion.  If
you receive a bus error when running p2Test, then try adding this to
CMakeCache.txt:

CMAKE_CXX_FLAGS:STRING=-DP2_LINK_WITH_BOOST_TEST

Alternatively, if p2Test says "Test setup error: test tree is empty",
then make sure that P2_LINK_WITH_BOOST_TEST is *not* defined.  If you
still can't get it to work, please send a message to
p2devel@yahoogroups.com with your operating system and boost versions.
Tell us where your copy of boost came from.  (Is it a precompiled
package?  Did you build it yourself?)

------------------------------------------------------------
-- NOW WHAT?  A DATAFLOW GRAPH
------------------------------------------------------------

You can run our measly unit tests:

   # unitTests/p2Test

This will execute portions of the p2 implementation in isolation.

You can look at some of our test programs under unitTests/olg/.

TODO: The rest of this section seems to be out of date.  tests/join no
longer exists, and we should explain how to automatically run the
nightly regression tests.

------------------------------------------------------------

tests/join is a test that demonstrates a dataflow graph that performs
some matching of semi-random tuples produced over time.  It does not use
OverLog, but puts the dataflow graph together directly.

The testSimpleJoin function creates a new Plumber (the container object
for a dataflow graph), and then constructs the following dataflow graph:

             /------TRANSFORM_A----STORE in A
TUPLESOURCE -|                        
             \------TRANSFORM_B----MATCH with A

TUPLESOURCE arranges a timed push source (producing tuples with the
current time at regular intervals) connected to a Print element
(printing out to standard out the tuples it sees) connected to a
duplicator element that duplicates the timed source stream.  One output
of the duplicator is fed into TRANSFORM_A and the other into
TRANSFORM_B.

TRANSFORM_A is a portion of the dataflow graph that takes the first of
the duplicator's outputs, transforms it with a PelTransform element
(transAS), drops some of its tuples with a Filter element (filterAS),
projects the result to remove the filtering field with a PelTransform
element (filterDropAS), performs duplicate elimination with a DupElim
element (dupElimAS), prints what comes through with a Print element
(transAPrintS), and inserts what remains in a local table with an Insert
element (rehashAS), then discarding the result (sinkAS).

TRANSFORM_B is a portion of the dataflow graph that takes the second of
the duplicator's outputs, transforms it with a PelTransform (transBS) in
a way different from transAS, again filters on a transformed field
(filterBS), projects away some of the transformed fields (filterDropBS),
eliminates duplicates (dupElimBS), and prints the output
(transBPrintS). Then this graph joins this stream with the elements
stored by the TRANSFORM_A branch of the graph, using a UniqueLookup
element (lookupBS) on field numbers 1 on either side, printing what
comes back with a Print element (lookupBPrintS), and then discarding it
(sinkBS).


The entire dataflow (as stored into the conf configuration object) is
passed to the plumber, which is then initialized, and run (with
eventLoop()).

The output on the console is rather verbose.  One can look at the
sequence of output from Print elements by doing:

   # tests/join |& grep Print

"AfterSource" entries indicate a new source tuple has been
created. "ATuples" prints out tuples produced (and stored) by
TRANSFORM_A. "BTuples" prints out tuples produces by TRANSFORM_B, before
the join.  "Matches" prints out those B tuples that match (thus far)
stored A tuples on their field numbers 1.  Some "Matches" tuples contain
an empty subtuple for A tuples: those correspond to B tuples that return
no match.



------------------------------------------------------------
-- NOW WHAT?  A DATAFLOW GRAPH
------------------------------------------------------------

Moving away from Automake.

